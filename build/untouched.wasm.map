{"version":3,"sources":["~lib/internal/allocator.ts","~lib/allocator/tlsf.ts","assembly/primitives/ImageBitmap.ts","~lib/memory.ts","assembly/renderer/Serializer.ts","~lib/internal/arraybuffer.ts","~lib/internal/typedarray.ts","~lib/internal/memory.ts","~lib/map.ts","~lib/arraybuffer.ts","assembly/renderer/CanvasRenderingContext2DSerializer.ts","assembly/renderer/OptimizedCanvasRenderingContext2D.ts","~lib/array.ts","assembly/index.ts","assembly/shared/Direction.ts","assembly/shared/GlobalCompositeOperation.ts","assembly/shared/ImageSmoothingQuality.ts","assembly/shared/LineCap.ts","assembly/shared/LineJoin.ts","assembly/shared/TextAlign.ts","assembly/shared/TextBaseline.ts","assembly/primitives/Path2DElement.ts","~lib/builtins.ts","~lib/string.ts","~lib/internal/string.ts","~lib/internal/hash.ts"],"names":[],"mappings":"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","sourceRoot":"assemblyscript:///","sourceContents":["/** Number of alignment bits. */\nexport const AL_BITS: u32 = 3;\n/** Number of possible alignment values. */\nexport const AL_SIZE: usize = 1 << <usize>AL_BITS;\n/** Mask to obtain just the alignment bits. */\nexport const AL_MASK: usize = AL_SIZE - 1;\n/** Maximum 32-bit allocation size. */\nexport const MAX_SIZE_32: usize = 1 << 30; // 1GB\n","/**\n * Two-Level Segregate Fit Memory Allocator.\n *\n * A general purpose dynamic memory allocator specifically designed to meet real-time requirements.\n * Always aligns to 8 bytes.\n *\n * @module std/assembly/allocator/tlsf\n *//***/\n\n// ╒══════════════ Block size interpretation (32-bit) ═════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┼─┴─┴─┴─┴─╫─┴─┴─┤\n// │ |                    FL                       │ SB = SL + AL  │ ◄─ usize\n// └───────────────────────────────────────────────┴─────────╨─────┘\n// FL: first level, SL: second level, AL: alignment, SB: small block\n\nimport {\n  AL_BITS,\n  AL_SIZE,\n  AL_MASK\n} from \"../internal/allocator\";\n\nconst SL_BITS: u32 = 5;\nconst SL_SIZE: usize = 1 << <usize>SL_BITS;\n\nconst SB_BITS: usize = <usize>(SL_BITS + AL_BITS);\nconst SB_SIZE: usize = 1 << <usize>SB_BITS;\n\nconst FL_BITS: u32 = (sizeof<usize>() == sizeof<u32>()\n  ? 30 // ^= up to 1GB per block\n  : 32 // ^= up to 4GB per block\n) - SB_BITS;\n\n// ╒════════════════ Block structure layout (32-bit) ══════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┼─┼─┤\n// │                          size                             │L│F│ ◄─┐ info\n// ╞═══════════════════════════════════════════════════════════╧═╧═╡   │      ┐\n// │                        if free: ◄ prev                        │ ◄─┤ usize\n// ├───────────────────────────────────────────────────────────────┤   │\n// │                        if free: next ►                        │ ◄─┤\n// ├───────────────────────────────────────────────────────────────┤   │\n// │                ... unused free space >= 0 ...                 │   │    = 0\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤   │\n// │                        if free: jump ▲                        │ ◄─┘\n// └───────────────────────────────────────────────────────────────┘ MIN SIZE ┘\n// F: FREE, L: LEFT_FREE\n\n/** Tag indicating that this block is free. */\nconst FREE: usize = 1 << 0;\n/** Tag indicating that this block's left block is free. */\nconst LEFT_FREE: usize = 1 << 1;\n/** Mask to obtain all tags. */\nconst TAGS: usize = FREE | LEFT_FREE;\n\n/** Block structure. */\n@unmanaged\nclass Block {\n\n  /** Info field holding this block's size and tags. */\n  info: usize;\n\n  /** End offset of the {@link Block#info} field. User data starts here. */\n  static readonly INFO: usize = (sizeof<usize>() + AL_MASK) & ~AL_MASK;\n\n  /** Previous free block, if any. Only valid if free. */\n  prev: Block | null;\n  /** Next free block, if any. Only valid if free. */\n  next: Block | null;\n\n  /** Minimum size of a block, excluding {@link Block#info}. */\n  static readonly MIN_SIZE: usize = (3 * sizeof<usize>() + AL_MASK) & ~AL_MASK;// prev + next + jump\n\n  /** Maximum size of a used block, excluding {@link Block#info}. */\n  static readonly MAX_SIZE: usize = 1 << (FL_BITS + SB_BITS);\n\n  /** Gets this block's left (free) block in memory. */\n  get left(): Block {\n    assert(this.info & LEFT_FREE); // must be free to contain a jump\n    return assert(\n      load<Block>(changetype<usize>(this) - sizeof<usize>())\n    ); // can't be null\n  }\n\n  /** Gets this block's right block in memory. */\n  get right(): Block {\n    assert(this.info & ~TAGS); // can't skip beyond the tail block\n    return assert(\n      changetype<Block>(\n        changetype<usize>(this) + Block.INFO + (this.info & ~TAGS)\n      )\n    ); // can't be null\n  }\n}\n\n// ╒════════════════ Root structure layout (32-bit) ═══════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤          ┐\n// │        0        |           flMap                            S│ ◄────┐\n// ╞═══════════════════════════════════════════════════════════════╡      │\n// │                           slMap[0] S                          │ ◄─┐  │\n// ├───────────────────────────────────────────────────────────────┤   │  │\n// │                           slMap[1]                            │ ◄─┤  │\n// ├───────────────────────────────────────────────────────────────┤  u32 │\n// │                              ...                              │ ◄─┤  │\n// ├───────────────────────────────────────────────────────────────┤   │  │\n// │                           slMap[22] P                         │ ◄─┘  │\n// ╞═══════════════════════════════════════════════════════════════╡    usize\n// │                            head[0]                            │ ◄────┤\n// ├───────────────────────────────────────────────────────────────┤      │\n// │                              ...                              │ ◄────┤\n// ├───────────────────────────────────────────────────────────────┤      │\n// │                           head[736]                           │ ◄────┤\n// ╞═══════════════════════════════════════════════════════════════╡      │\n// │                            tailRef                            │ ◄────┘\n// └───────────────────────────────────────────────────────────────┘   SIZE   ┘\n// S: Small blocks map, P: Possibly padded if 64-bit\n\nassert((1 << SL_BITS) <= 32); // second level must fit into 32 bits\n\n/** Root structure. */\n@unmanaged\nclass Root {\n\n  /** First level bitmap. */\n  flMap: usize = 0;\n\n  /** Start offset of second level maps. */\n  private static readonly SL_START: usize = sizeof<usize>();\n\n  // Using *one* SL map per *FL bit*\n\n  /** Gets the second level map for the specified first level. */\n  getSLMap(fl: usize): u32 {\n    assert(fl < FL_BITS); // fl out of range\n    return load<u32>(changetype<usize>(this) + fl * 4, Root.SL_START);\n  }\n\n  /** Sets the second level map for the specified first level. */\n  setSLMap(fl: usize, value: u32): void {\n    assert(fl < FL_BITS); // fl out of range\n    store<u32>(changetype<usize>(this) + fl * 4, value, Root.SL_START);\n  }\n\n  /** End offset of second level maps. */\n  private static readonly SL_END: usize = Root.SL_START + FL_BITS * 4;\n\n  // Using *number bits per SL* heads per *FL bit*\n\n  /** Start offset of FL/SL heads. */\n  private static readonly HL_START: usize = (Root.SL_END + AL_MASK) & ~AL_MASK;\n\n  /** Gets the head of the specified first and second level index. */\n  getHead(fl: usize, sl: u32): Block | null {\n    assert(fl < FL_BITS); // fl out of range\n    assert(sl < SL_SIZE); // sl out of range\n    return changetype<Block>(load<usize>(\n      changetype<usize>(this) + (fl * SL_SIZE + <usize>sl) * sizeof<usize>()\n    , Root.HL_START));\n  }\n\n  /** Sets the head of the specified first and second level index. */\n  setHead(fl: usize, sl: u32, value: Block | null): void {\n    assert(fl < FL_BITS); // fl out of range\n    assert(sl < SL_SIZE); // sl out of range\n    store<usize>(\n      changetype<usize>(this) + (fl * SL_SIZE + <usize>sl) * sizeof<usize>()\n    , changetype<usize>(value)\n    , Root.HL_START);\n  }\n\n  /** End offset of FL/SL heads. */\n  private static readonly HL_END: usize = (\n    Root.HL_START + FL_BITS * SL_SIZE * sizeof<usize>()\n  );\n\n  get tailRef(): usize { return load<usize>(0, Root.HL_END); }\n  set tailRef(value: usize) { store<usize>(0, value, Root.HL_END); }\n\n  /** Total size of the {@link Root} structure. */\n  static readonly SIZE: usize = Root.HL_END + sizeof<usize>();\n\n  /** Inserts a previously used block back into the free list. */\n  insert(block: Block): void {\n    // check as much as possible here to prevent invalid free blocks\n    assert(block); // cannot be null\n    var blockInfo = block.info;\n    assert(blockInfo & FREE); // must be free\n    var size: usize;\n    assert(\n      (size = block.info & ~TAGS) >= Block.MIN_SIZE && size < Block.MAX_SIZE\n    ); // must be valid, not necessary to compute yet if noAssert=true\n\n    var right: Block = assert(block.right); // can't be null\n    var rightInfo = right.info;\n\n    // merge with right block if also free\n    if (rightInfo & FREE) {\n      this.remove(right);\n      block.info = (blockInfo += Block.INFO + (rightInfo & ~TAGS));\n      right = block.right;\n      rightInfo = right.info;\n      // jump is set below\n    }\n\n    // merge with left block if also free\n    if (blockInfo & LEFT_FREE) {\n      let left: Block = assert(block.left); // can't be null\n      let leftInfo = left.info;\n      assert(leftInfo & FREE); // must be free according to tags\n      this.remove(left);\n      left.info = (leftInfo += Block.INFO + (blockInfo & ~TAGS));\n      block = left;\n      blockInfo = leftInfo;\n      // jump is set below\n    }\n\n    right.info = rightInfo | LEFT_FREE;\n    this.setJump(block, right);\n    // right is no longer used now, hence rightInfo is not synced\n\n    size = blockInfo & ~TAGS;\n    assert(size >= Block.MIN_SIZE && size < Block.MAX_SIZE); // must be valid\n\n    // mapping_insert\n    var fl: usize, sl: u32;\n    if (size < SB_SIZE) {\n      fl = 0;\n      sl = <u32>(size / AL_SIZE);\n    } else {\n      fl = fls<usize>(size);\n      sl = <u32>((size >> (fl - SL_BITS)) ^ (1 << SL_BITS));\n      fl -= SB_BITS - 1;\n    }\n\n    // perform insertion\n    var head = this.getHead(fl, sl);\n    block.prev = null;\n    block.next = head;\n    if (head) head.prev = block;\n    this.setHead(fl, sl, block);\n\n    // update first and second level maps\n    this.flMap |= (1 << fl);\n    this.setSLMap(fl, this.getSLMap(fl) | (1 << sl));\n  }\n\n  /**\n   * Removes a free block from FL/SL maps. Does not alter left/jump because it\n   * is likely that splitting is performed afterwards, invalidating any changes\n   * again.\n   */\n  private remove(block: Block): void {\n    var blockInfo = block.info;\n    assert(blockInfo & FREE); // must be free\n    var size = blockInfo & ~TAGS;\n    assert(size >= Block.MIN_SIZE && size < Block.MAX_SIZE); // must be valid\n\n    // mapping_insert\n    var fl: usize, sl: u32;\n    if (size < SB_SIZE) {\n      fl = 0;\n      sl = <u32>(size / AL_SIZE);\n    } else {\n      fl = fls<usize>(size);\n      sl = <u32>((size >> (fl - SL_BITS)) ^ (1 << SL_BITS));\n      fl -= SB_BITS - 1;\n    }\n\n    // link previous and next free block\n    var prev = block.prev;\n    var next = block.next;\n    if (prev) prev.next = next;\n    if (next) next.prev = prev;\n\n    // update head if we are removing it\n    if (block == this.getHead(fl, sl)) {\n      this.setHead(fl, sl, next);\n\n      // clear second level map if head is empty now\n      if (!next) {\n        let slMap = this.getSLMap(fl);\n        this.setSLMap(fl, slMap &= ~(1 << sl));\n\n        // clear first level map if second level is empty now\n        if (!slMap) this.flMap &= ~(1 << fl);\n      }\n    }\n  }\n\n  /** Searches for a free block of at least the specified size. */\n  search(size: usize): Block | null {\n    assert(size >= Block.MIN_SIZE && size < Block.MAX_SIZE);\n\n    // mapping_search\n    var fl: usize, sl: u32;\n    if (size < SB_SIZE) {\n      fl = 0;\n      sl = <u32>(size / AL_SIZE);\n    } else {\n      // (*) size += (1 << (fls<usize>(size) - SL_BITS)) - 1;\n      fl = fls<usize>(size);\n      sl = <u32>((size >> (fl - SL_BITS)) ^ (1 << SL_BITS));\n      fl -= SB_BITS - 1;\n      // (*) instead of rounding up, use next second level list for better fit\n      if (sl < SL_SIZE - 1) ++sl;\n      else ++fl, sl = 0;\n    }\n\n    // search second level\n    var slMap = this.getSLMap(fl) & (~0 << sl);\n    var head: Block | null;\n    if (!slMap) {\n      // search next larger first level\n      let flMap = this.flMap & (~0 << (fl + 1));\n      if (!flMap) {\n        head = null;\n      } else {\n        fl = ffs<usize>(flMap);\n        slMap = assert(this.getSLMap(fl)); // can't be zero if fl points here\n        head = this.getHead(fl, ffs<u32>(slMap));\n      }\n    } else {\n      head = this.getHead(fl, ffs<u32>(slMap));\n    }\n    return head;\n  }\n\n  /** Links a free left with its right block in memory. */\n  private setJump(left: Block, right: Block): void {\n    assert(left.info & FREE);       // must be free\n    assert(left.right == right);    // right block must match\n    assert(right.info & LEFT_FREE); // right block must be tagged as LEFT_FREE\n    store<Block>(\n      changetype<usize>(right) - sizeof<usize>()\n    , left); // last word in left block's (free) data region\n  }\n\n  /**\n   * Uses the specified free block, removing it from internal maps and\n   * splitting it if possible, and returns its data pointer.\n   */\n  use(block: Block, size: usize): usize {\n    var blockInfo = block.info;\n    assert(blockInfo & FREE); // must be free so we can use it\n    assert(size >= Block.MIN_SIZE && size < Block.MAX_SIZE); // must be valid\n    assert(!(size & AL_MASK)); // size must be aligned so the new block is\n\n    this.remove(block);\n\n    // split if the block can hold another MIN_SIZE block\n    var remaining = (blockInfo & ~TAGS) - size;\n    if (remaining >= Block.INFO + Block.MIN_SIZE) {\n      block.info = size | (blockInfo & LEFT_FREE); // also discards FREE\n\n      let spare = changetype<Block>(\n        changetype<usize>(block) + Block.INFO + size\n      );\n      spare.info = (remaining - Block.INFO) | FREE; // not LEFT_FREE\n      this.insert(spare); // also sets jump\n\n    // otherwise tag block as no longer FREE and right as no longer LEFT_FREE\n    } else {\n      block.info = blockInfo & ~FREE;\n      let right: Block = assert(block.right); // can't be null (tail)\n      right.info &= ~LEFT_FREE;\n    }\n\n    return changetype<usize>(block) + Block.INFO;\n  }\n\n  /** Adds more memory to the pool. */\n  addMemory(start: usize, end: usize): bool {\n    assert(start <= end);\n    assert(!(start & AL_MASK)); // must be aligned\n    assert(!(end & AL_MASK)); // must be aligned\n\n    var tailRef = this.tailRef;\n    var tailInfo: usize = 0;\n    if (tailRef) {\n      assert(start >= tailRef + sizeof<usize>()); // starts after tail\n\n      // merge with current tail if adjacent\n      if (start - Block.INFO == tailRef) {\n        start -= Block.INFO;\n        tailInfo = changetype<Block>(tailRef).info;\n      }\n\n    } else {\n      assert(start >= changetype<usize>(this) + Root.SIZE); // starts after root\n    }\n\n    // check if size is large enough for a free block and the tail block\n    var size = end - start;\n    if (size < Block.INFO + Block.MIN_SIZE + Block.INFO) {\n      return false;\n    }\n\n    // left size is total minus its own and the zero-length tail's header\n    var leftSize = size - 2 * Block.INFO;\n    var left = changetype<Block>(start);\n    left.info = leftSize | FREE | (tailInfo & LEFT_FREE);\n    left.prev = null;\n    left.next = null;\n\n    // tail is a zero-length used block\n    var tail = changetype<Block>(start + size - Block.INFO);\n    tail.info = 0 | LEFT_FREE;\n    this.tailRef = changetype<usize>(tail);\n\n    this.insert(left); // also merges with free left before tail / sets jump\n\n    return true;\n  }\n}\n\n/** Determines the first (LSB to MSB) set bit's index of a word. */\nfunction ffs<T>(word: T): T {\n  assert(word != 0); // word cannot be 0\n  return ctz<T>(word);  // differs from ffs only for 0\n}\n\n/** Determines the last (LSB to MSB) set bit's index of a word. */\nfunction fls<T>(word: T): T {\n  assert(word != 0); // word cannot be 0\n  const inv: T = (sizeof<T>() << 3) - 1;\n  return inv - clz<T>(word);\n}\n\n/** Reference to the initialized {@link Root} structure, once initialized. */\nvar ROOT: Root = changetype<Root>(0);\n\n// Memory allocator interface\n\n/** Allocates a chunk of memory. */\n@global export function __memory_allocate(size: usize): usize {\n\n  // initialize if necessary\n  var root = ROOT;\n  if (!root) {\n    let rootOffset = (HEAP_BASE + AL_MASK) & ~AL_MASK;\n    let pagesBefore = memory.size();\n    let pagesNeeded = <i32>((((rootOffset + Root.SIZE) + 0xffff) & ~0xffff) >>> 16);\n    if (pagesNeeded > pagesBefore && memory.grow(pagesNeeded - pagesBefore) < 0) unreachable();\n    ROOT = root = changetype<Root>(rootOffset);\n    root.tailRef = 0;\n    root.flMap = 0;\n    for (let fl: usize = 0; fl < FL_BITS; ++fl) {\n      root.setSLMap(fl, 0);\n      for (let sl: u32 = 0; sl < SL_SIZE; ++sl) {\n        root.setHead(fl, sl, null);\n      }\n    }\n    root.addMemory((rootOffset + Root.SIZE + AL_MASK) & ~AL_MASK, memory.size() << 16);\n  }\n\n  // search for a suitable block\n  if (size > Block.MAX_SIZE) unreachable();\n\n  // 32-bit MAX_SIZE is 1 << 30 and itself aligned, hence the following can't overflow MAX_SIZE\n  size = max<usize>((size + AL_MASK) & ~AL_MASK, Block.MIN_SIZE);\n\n  var block = root.search(size);\n  if (!block) {\n\n    // request more memory\n    let pagesBefore = memory.size();\n    let pagesNeeded = <i32>(((size + 0xffff) & ~0xffff) >>> 16);\n    let pagesWanted = max(pagesBefore, pagesNeeded); // double memory\n    if (memory.grow(pagesWanted) < 0) {\n      if (memory.grow(pagesNeeded) < 0) {\n        unreachable(); // out of memory\n      }\n    }\n    let pagesAfter = memory.size();\n    root.addMemory(<usize>pagesBefore << 16, <usize>pagesAfter << 16);\n    block = assert(root.search(size)); // must be found now\n  }\n\n  assert((block.info & ~TAGS) >= size);\n  return root.use(<Block>block, size);\n}\n\n/** Frees the chunk of memory at the specified address. */\n@global export function __memory_free(data: usize): void {\n  if (data) {\n    let root = ROOT;\n    if (root) {\n      let block = changetype<Block>(data - Block.INFO);\n      let blockInfo = block.info;\n      assert(!(blockInfo & FREE)); // must be used\n      block.info = blockInfo | FREE;\n      root.insert(changetype<Block>(data - Block.INFO));\n    }\n  }\n}\n\n@global export function __memory_reset(): void {\n  unreachable();\n}\n","import { load_image } from \"../linked\";\r\n\r\nvar index: i32 = 0;\r\n\r\nexport function createImageBitmap(src: string): ImageBitmap {\r\n  var img: ImageBitmap = ImageBitmap.create(index++);\r\n  load_image(img, src);\r\n  return img;\r\n}\r\n\r\nexport class ImageBitmap {\r\n  public _index: i32 = 0;\r\n  public _loaded: i32 = 0;\r\n  public width: i32 = 0;\r\n  public height: i32 = 0;\r\n\r\n  public static create(index: i32): ImageBitmap {\r\n    return new ImageBitmap(index);\r\n  }\r\n\r\n  protected constructor(index: i32) {\r\n    this._index = index;\r\n  }\r\n}\r\n","import { memcmp, memmove, memset } from \"./internal/memory\";\n\n@builtin export declare const HEAP_BASE: usize; // tslint:disable-line\n\n/* tslint:disable */\n\nexport namespace memory {\n\n  @builtin export declare function size(): i32;\n\n  @builtin export declare function grow(pages: i32): i32;\n\n  @inline export function fill(dest: usize, c: u8, n: usize): void { // see: musl/src/string/memset\n    if (isDefined(__memory_fill)) { __memory_fill(dest, c, n); return; }\n    memset(dest, c, n);\n  }\n\n  @inline export function copy(dest: usize, src: usize, n: usize): void { // see: musl/src/string/memmove.c\n    if (isDefined(__memory_copy)) { __memory_copy(dest, src, n); return; }\n    memmove(dest, src, n);\n  }\n\n  @inline export function compare(vl: usize, vr: usize, n: usize): i32 { // see: musl/src/string/memcmp.c\n    if (isDefined(__memory_compare)) return __memory_compare(vl, vr, n);\n    return memcmp(vl, vr, n);\n  }\n\n  // Passive segments\n\n  // export function init(segmentIndex: u32, srcOffset: usize, dstOffset: usize, n: usize): void {\n  //   __memory_init(segmentIndex, srcOffset, dstOffset);\n  // }\n\n  // export function drop(segmentIndex: u32): void {\n  //   __memory_drop(segmentIndex);\n  // }\n\n  // Allocator\n\n  @inline export function allocate(size: usize): usize {\n    if (isDefined(__memory_allocate)) return __memory_allocate(size);\n    WARNING(\"Calling 'memory.allocate' requires a memory manager to be present.\");\n    return <usize>unreachable();\n  }\n\n  @inline export function free(ptr: usize): void {\n    if (isDefined(__memory_free)) { __memory_free(ptr); return; }\n    WARNING(\"Calling 'memory.free' requires a memory manager to be present.\");\n    unreachable();\n  }\n\n  @inline export function reset(): void {\n    if (isDefined(__memory_reset)) { __memory_reset(); return; }\n    unreachable();\n  }\n}\n","export class Serializer<T> {\r\n  index: i32 = 0;\r\n  data: Float64Array = new Float64Array(8000);\r\n\r\n  public init(): void {\r\n    this.index = 0;\r\n  }\r\n\r\n  @inline\r\n  protected write_zero(instruction: T): void {\r\n    if (this.data.length <= (this.index + 2)) this.grow();\r\n    this.data[this.index++] = <f64>instruction;\r\n    this.data[this.index++] = 2.0; // stride\r\n  }\r\n\r\n  @inline\r\n  protected write_one(instruction: T, value: f64): void {\r\n    if (this.data.length <= (this.index + 3)) this.grow();\r\n    this.data[this.index++] = <f64>instruction;\r\n    this.data[this.index++] = 3.0; // stride\r\n    this.data[this.index++] = value;\r\n  }\r\n\r\n\r\n  @inline\r\n  protected write_two(instruction: T, a: f64, b: f64): void {\r\n    if (this.data.length <= (this.index + 4)) this.grow();\r\n    this.data[this.index++] = <f64>instruction;\r\n    this.data[this.index++] = 4.0; // stride\r\n    this.data[this.index++] = a;\r\n    this.data[this.index++] = b;\r\n  }\r\n\r\n  @inline\r\n  protected write_four(instruction: T, a: f64, b: f64, c: f64, d: f64): void {\r\n    if (this.data.length <= (this.index + 6)) this.grow();\r\n    this.data[this.index++] = <f64>instruction;\r\n    this.data[this.index++] = 6.0; // stride\r\n    this.data[this.index++] = a;\r\n    this.data[this.index++] = b;\r\n    this.data[this.index++] = c;\r\n    this.data[this.index++] = d;\r\n  }\r\n\r\n  @inline\r\n  protected write_five(instruction: T, a: f64, b: f64, c: f64, d: f64, e: f64): void {\r\n    if (this.data.length <= (this.index + 7)) this.grow();\r\n    this.data[this.index++] = <f64>instruction;\r\n    this.data[this.index++] = 7.0; // stride\r\n    this.data[this.index++] = a;\r\n    this.data[this.index++] = b;\r\n    this.data[this.index++] = c;\r\n    this.data[this.index++] = d;\r\n    this.data[this.index++] = e;\r\n  }\r\n\r\n  @inline\r\n  protected write_six(instruction: T, a: f64, b: f64, c: f64, d: f64, e: f64, f: f64): void {\r\n    if (this.data.length <= (this.index + 8)) this.grow();\r\n    this.data[this.index++] = <f64>instruction;\r\n    this.data[this.index++] = 8.0; // stride\r\n    this.data[this.index++] = a;\r\n    this.data[this.index++] = b;\r\n    this.data[this.index++] = c;\r\n    this.data[this.index++] = d;\r\n    this.data[this.index++] = e;\r\n    this.data[this.index++] = f;\r\n  }\r\n\r\n  @inline\r\n  protected write_eight(instruction: T, a: f64, b: f64, c: f64, d: f64, e: f64, f: f64, g: f64, h: f64): void {\r\n    if (this.data.length <= (this.index + 11)) this.grow();\r\n    this.data[this.index++] = <f64>instruction;\r\n    this.data[this.index++] = 10.0; // stride\r\n    this.data[this.index++] = a;\r\n    this.data[this.index++] = b;\r\n    this.data[this.index++] = c;\r\n    this.data[this.index++] = d;\r\n    this.data[this.index++] = e;\r\n    this.data[this.index++] = f;\r\n    this.data[this.index++] = g;\r\n    this.data[this.index++] = h;\r\n  }\r\n\r\n  @inline\r\n  protected write_nine(instruction: T, a: f64, b: f64, c: f64, d: f64, e: f64, f: f64, g: f64, h: f64, i: f64): void {\r\n    if (this.data.length <= (this.index + 11)) this.grow();\r\n    this.data[this.index++] = <f64>instruction;\r\n    this.data[this.index++] = 11.0; // stride\r\n    this.data[this.index++] = a;\r\n    this.data[this.index++] = b;\r\n    this.data[this.index++] = c;\r\n    this.data[this.index++] = d;\r\n    this.data[this.index++] = e;\r\n    this.data[this.index++] = f;\r\n    this.data[this.index++] = g;\r\n    this.data[this.index++] = h;\r\n    this.data[this.index++] = i;\r\n  }\r\n\r\n  @inline\r\n  protected write_variable(instruction: T, props: f64[]): void {\r\n    if (this.data.length <= (this.index + props.length + 2)) this.grow();\r\n    this.data[this.index++] = <f64>instruction;\r\n    this.data[this.index++] = <f64>(props.length + 2);\r\n    var i: i32 = 0;\r\n    var length: i32 = props.length;\r\n    while (i < length) {\r\n      this.data[this.index++] = props[i];\r\n      ++i;\r\n    }\r\n  }\r\n\r\n  @inline\r\n  protected grow(): void {\r\n    var data: Float64Array = new Float64Array(this.data.length + 8000);\r\n    var length: i32 = this.data.length;\r\n    var i: i32 = 0;\r\n    while (i < length) {\r\n      data[i] = this.data[i];\r\n      ++i;\r\n    }\r\n    this.data = data;\r\n  }\r\n}\r\n","import {\n  AL_MASK,\n  MAX_SIZE_32\n } from \"./allocator\";\n\n/** Size of an ArrayBuffer header. */\nexport const HEADER_SIZE: usize = (offsetof<ArrayBuffer>() + AL_MASK) & ~AL_MASK;\n/** Maximum byte length of an ArrayBuffer. */\nexport const MAX_BLENGTH: i32 = <i32>MAX_SIZE_32 - HEADER_SIZE;\n\nfunction computeSize(byteLength: i32): usize {\n  // round up to power of 2, with HEADER_SIZE=8:\n  // 0            -> 2^3  = 8\n  // 1..8         -> 2^4  = 16\n  // 9..24        -> 2^5  = 32\n  // ...\n  // MAX_LENGTH   -> 2^30 = 0x40000000 (MAX_SIZE_32)\n  return <usize>1 << <usize>(<u32>32 - clz<u32>(byteLength + HEADER_SIZE - 1));\n}\n\n// Low-level utility\n\nfunction __gc(ref: usize): void {}\n\nexport function allocateUnsafe(byteLength: i32): ArrayBuffer {\n  assert(<u32>byteLength <= <u32>MAX_BLENGTH);\n  var buffer: usize;\n  if (isManaged<ArrayBuffer>()) {\n    buffer = __gc_allocate(computeSize(byteLength), __gc); // tslint:disable-line\n  } else {\n    buffer = memory.allocate(computeSize(byteLength));\n  }\n  store<i32>(buffer, byteLength, offsetof<ArrayBuffer>(\"byteLength\"));\n  return changetype<ArrayBuffer>(buffer);\n}\n\nexport function reallocateUnsafe(buffer: ArrayBuffer, newByteLength: i32): ArrayBuffer {\n  var oldByteLength = buffer.byteLength;\n  if (newByteLength > oldByteLength) {\n    assert(newByteLength <= MAX_BLENGTH);\n    if (newByteLength <= <i32>(computeSize(oldByteLength) - HEADER_SIZE)) { // fast path: zero out additional space\n      store<i32>(changetype<usize>(buffer), newByteLength, offsetof<ArrayBuffer>(\"byteLength\"));\n    } else { // slow path: copy to new buffer\n      let newBuffer = allocateUnsafe(newByteLength);\n      memory.copy(\n        changetype<usize>(newBuffer) + HEADER_SIZE,\n        changetype<usize>(buffer) + HEADER_SIZE,\n        <usize>oldByteLength\n      );\n      if (!isManaged<ArrayBuffer>()) {\n        memory.free(changetype<usize>(buffer));\n      }\n      buffer = newBuffer;\n    }\n    memory.fill(\n      changetype<usize>(buffer) + HEADER_SIZE + <usize>oldByteLength,\n      0,\n      <usize>(newByteLength - oldByteLength)\n    );\n  } else if (newByteLength < oldByteLength) { // fast path: override size\n    // TBD: worth to copy and release if size is significantly less than before?\n    assert(newByteLength >= 0);\n    store<i32>(changetype<usize>(buffer), newByteLength, offsetof<ArrayBuffer>(\"byteLength\"));\n  }\n  return buffer;\n}\n\n// The helpers below use two different types in order to emit loads and stores that load respectively\n// store one type to/from memory while returning/taking the desired output/input type. This allows to\n// emit instructions like\n//\n// * `i32.load8` ^= `<i32>load<i8>(...)` that reads an i8 but returns an i32, or\n// * `i64.load32_s` ^= `<i64>load<i32>(...)`) that reads a 32-bit as a 64-bit integer\n//\n// without having to emit an additional instruction for conversion purposes. The second parameter\n// can be omitted for references and other loads and stores that simply return the exact type.\n\n@inline export function LOAD<T,TOut = T>(buffer: ArrayBuffer, index: i32, byteOffset: i32 = 0): TOut {\n  return <TOut>load<T>(changetype<usize>(buffer) + (<usize>index << alignof<T>()) + <usize>byteOffset, HEADER_SIZE);\n}\n\n@inline export function STORE<T,TIn = T>(buffer: ArrayBuffer, index: i32, value: TIn, byteOffset: i32 = 0): void {\n  store<T>(changetype<usize>(buffer) + (<usize>index << alignof<T>()) + <usize>byteOffset, value, HEADER_SIZE);\n}\n","import {\n  HEADER_SIZE as AB_HEADER_SIZE,\n  MAX_BLENGTH as AB_MAX_BLENGTH,\n  allocateUnsafe,\n  LOAD,\n  STORE\n} from \"./arraybuffer\";\n\nimport {\n  SORT as SORT_IMPL\n} from \"./sort\";\n\n/** Typed array base class. Not a global object. */\nexport abstract class TypedArray<T> {\n  [key: number]: T; // compatibility only\n\n  readonly buffer: ArrayBuffer;\n  readonly byteOffset: i32;\n  readonly byteLength: i32;\n\n  constructor(length: i32) {\n    const MAX_LENGTH = <u32>AB_MAX_BLENGTH / sizeof<T>();\n    if (<u32>length > MAX_LENGTH) throw new RangeError(\"Invalid typed array length\");\n    var byteLength = length << alignof<T>();\n    var buffer = allocateUnsafe(byteLength);\n    memory.fill(changetype<usize>(buffer) + AB_HEADER_SIZE, 0, <usize>byteLength);\n    this.buffer = buffer;\n    this.byteOffset = 0;\n    this.byteLength = byteLength;\n  }\n\n  @inline\n  get length(): i32 {\n    return this.byteLength >>> alignof<T>();\n  }\n\n  @operator(\"[]\")\n  protected __get(index: i32): T {\n    if (<u32>index >= <u32>(this.byteLength >>> alignof<T>())) throw new Error(\"Index out of bounds\");\n    return LOAD<T>(this.buffer, index, this.byteOffset);\n  }\n\n  @inline @operator(\"{}\")\n  protected __unchecked_get(index: i32): T {\n    return LOAD<T>(this.buffer, index, this.byteOffset);\n  }\n\n  @operator(\"[]=\")\n  protected __set(index: i32, value: NATIVE<T>): void {\n    if (<u32>index >= <u32>(this.byteLength >>> alignof<T>())) throw new Error(\"Index out of bounds\");\n    STORE<T,NATIVE<T>>(this.buffer, index, value, this.byteOffset);\n  }\n\n  @inline @operator(\"{}=\")\n  protected __unchecked_set(index: i32, value: NATIVE<T>): void {\n    STORE<T,NATIVE<T>>(this.buffer, index, value, this.byteOffset);\n  }\n\n  // copyWithin(target: i32, start: i32, end: i32 = this.length): this\n}\n\n@inline\nexport function FILL<TArray extends TypedArray<T>, T>(\n  array: TArray,\n  value: NATIVE<T>,\n  start: i32,\n  end: i32\n): TArray {\n  var buffer = array.buffer;\n  var byteOffset = array.byteOffset;\n  var len = array.length;\n  start = start < 0 ? max(len + start, 0) : min(start, len);\n  end   = end   < 0 ? max(len + end,   0) : min(end,   len);\n  if (sizeof<T>() == 1) {\n    if (start < end) {\n      memory.fill(\n        changetype<usize>(buffer) + start + byteOffset + AB_HEADER_SIZE,\n        <u8>value,\n        <usize>(end - start)\n      );\n    }\n  } else {\n    for (; start < end; ++start) {\n      STORE<T,NATIVE<T>>(buffer, start, value, byteOffset);\n    }\n  }\n  return array;\n}\n\n@inline\nexport function SORT<TArray extends TypedArray<T>, T>(\n  array: TArray,\n  comparator: (a: T, b: T) => i32\n): TArray {\n  var byteOffset = array.byteOffset;\n  var length = array.length;\n  if (length <= 1) return array;\n  var buffer = array.buffer;\n  if (length == 2) {\n    let a = LOAD<T>(buffer, 1, byteOffset);\n    let b = LOAD<T>(buffer, 0, byteOffset);\n    if (comparator(a, b) < 0) {\n      STORE<T>(buffer, 1, b, byteOffset);\n      STORE<T>(buffer, 0, a, byteOffset);\n    }\n    return array;\n  }\n  SORT_IMPL<T>(buffer, byteOffset, length, comparator);\n  return array;\n}\n\n@inline\nexport function SUBARRAY<TArray extends TypedArray<T>, T>(\n  array: TArray,\n  begin: i32,\n  end: i32\n): TArray {\n  var length = <i32>array.length;\n  if (begin < 0) begin = max(length + begin, 0);\n  else begin = min(begin, length);\n  if (end < 0) end = max(length + end, begin);\n  else end = max(min(end, length), begin);\n  var slice = memory.allocate(offsetof<TArray>());\n  store<usize>(slice, array.buffer, offsetof<TArray>(\"buffer\"));\n  store<i32>(slice, <i32>array.byteOffset + (begin << alignof<T>()), offsetof<TArray>(\"byteOffset\"));\n  store<i32>(slice, (end - begin) << alignof<T>(), offsetof<TArray>(\"byteLength\"));\n  return changetype<TArray>(slice);\n}\n\n@inline\nexport function REDUCE<TArray extends TypedArray<T>, T, TRet>(\n  array: TArray,\n  callbackfn: (accumulator: TRet, value: T, index: i32, array: TArray) => TRet,\n  initialValue: TRet\n): TRet {\n  var index = 0;\n  var length = <i32>array.length;\n  while (index != length) {\n    initialValue = callbackfn(\n      initialValue,\n      unchecked(array[index]),\n      index,\n      array,\n    );\n    ++index;\n  }\n  return initialValue;\n}\n\n@inline\nexport function REDUCE_RIGHT<TArray extends TypedArray<T>, T, TRet>(\n  array: TArray,\n  callbackfn: (accumulator: TRet, value: T, index: i32, array: TArray) => TRet,\n  initialValue: TRet\n): TRet {\n  var index = <i32>array.length - 1;\n  var length = -1;\n  while (index != length) {\n    initialValue = callbackfn(\n      initialValue,\n      unchecked(array[index]),\n      index,\n      array,\n    );\n    --index;\n  }\n  return initialValue;\n}\n\n@inline\nexport function MAP<TArray extends TypedArray<T>, T>(\n  array: TArray,\n  callbackfn: (value: T, index: i32, self: TArray) => T,\n): TArray {\n  var length: i32 = array.length;\n  var result = instantiate<TArray>(length);\n  var i: i32 = 0;\n  while (i < length) {\n    unchecked(result[i] = callbackfn(array[i], i, <TArray>array));\n    ++i;\n  }\n  return result;\n}\n","// this function will go away once `memory.copy` becomes an intrinsic\nexport function memcpy(dest: usize, src: usize, n: usize): void { // see: musl/src/string/memcpy.c\n  var w: u32, x: u32;\n\n  // copy 1 byte each until src is aligned to 4 bytes\n  while (n && (src & 3)) {\n    store<u8>(dest++, load<u8>(src++));\n    n--;\n  }\n\n  // if dst is aligned to 4 bytes as well, copy 4 bytes each\n  if ((dest & 3) == 0) {\n    while (n >= 16) {\n      store<u32>(dest     , load<u32>(src     ));\n      store<u32>(dest +  4, load<u32>(src +  4));\n      store<u32>(dest +  8, load<u32>(src +  8));\n      store<u32>(dest + 12, load<u32>(src + 12));\n      src += 16; dest += 16; n -= 16;\n    }\n    if (n & 8) {\n      store<u32>(dest    , load<u32>(src    ));\n      store<u32>(dest + 4, load<u32>(src + 4));\n      dest += 8; src += 8;\n    }\n    if (n & 4) {\n      store<u32>(dest, load<u32>(src));\n      dest += 4; src += 4;\n    }\n    if (n & 2) { // drop to 2 bytes each\n      store<u16>(dest, load<u16>(src));\n      dest += 2; src += 2;\n    }\n    if (n & 1) { // drop to 1 byte\n      store<u8>(dest++, load<u8>(src++));\n    }\n    return;\n  }\n\n  // if dst is not aligned to 4 bytes, use alternating shifts to copy 4 bytes each\n  // doing shifts if faster when copying enough bytes (here: 32 or more)\n  if (n >= 32) {\n    switch (dest & 3) {\n      // known to be != 0\n      case 1: {\n        w = load<u32>(src);\n        store<u8>(dest++, load<u8>(src++));\n        store<u8>(dest++, load<u8>(src++));\n        store<u8>(dest++, load<u8>(src++));\n        n -= 3;\n        while (n >= 17) {\n          x = load<u32>(src + 1);\n          store<u32>(dest, w >> 24 | x << 8);\n          w = load<u32>(src + 5);\n          store<u32>(dest + 4, x >> 24 | w << 8);\n          x = load<u32>(src + 9);\n          store<u32>(dest + 8, w >> 24 | x << 8);\n          w = load<u32>(src + 13);\n          store<u32>(dest + 12, x >> 24 | w << 8);\n          src += 16; dest += 16; n -= 16;\n        }\n        break;\n      }\n      case 2: {\n        w = load<u32>(src);\n        store<u8>(dest++, load<u8>(src++));\n        store<u8>(dest++, load<u8>(src++));\n        n -= 2;\n        while (n >= 18) {\n          x = load<u32>(src + 2);\n          store<u32>(dest, w >> 16 | x << 16);\n          w = load<u32>(src + 6);\n          store<u32>(dest + 4, x >> 16 | w << 16);\n          x = load<u32>(src + 10);\n          store<u32>(dest + 8, w >> 16 | x << 16);\n          w = load<u32>(src + 14);\n          store<u32>(dest + 12, x >> 16 | w << 16);\n          src += 16; dest += 16; n -= 16;\n        }\n        break;\n      }\n      case 3: {\n        w = load<u32>(src);\n        store<u8>(dest++, load<u8>(src++));\n        n -= 1;\n        while (n >= 19) {\n          x = load<u32>(src + 3);\n          store<u32>(dest, w >> 8 | x << 24);\n          w = load<u32>(src + 7);\n          store<u32>(dest + 4, x >> 8 | w << 24);\n          x = load<u32>(src + 11);\n          store<u32>(dest + 8, w >> 8 | x << 24);\n          w = load<u32>(src + 15);\n          store<u32>(dest + 12, x >> 8 | w << 24);\n          src += 16; dest += 16; n -= 16;\n        }\n        break;\n      }\n    }\n  }\n\n  // copy remaining bytes one by one\n  if (n & 16) {\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n  }\n  if (n & 8) {\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n  }\n  if (n & 4) {\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n  }\n  if (n & 2) {\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n  }\n  if (n & 1) {\n    store<u8>(dest++, load<u8>(src++));\n  }\n}\n\n// this function will go away once `memory.copy` becomes an intrinsic\nexport function memmove(dest: usize, src: usize, n: usize): void { // see: musl/src/string/memmove.c\n  if (dest === src) return;\n  if (src + n <= dest || dest + n <= src) {\n    memcpy(dest, src, n);\n    return;\n  }\n  if (dest < src) {\n    if ((src & 7) == (dest & 7)) {\n      while (dest & 7) {\n        if (!n) return;\n        --n;\n        store<u8>(dest++, load<u8>(src++));\n      }\n      while (n >= 8) {\n        store<u64>(dest, load<u64>(src));\n        n    -= 8;\n        dest += 8;\n        src  += 8;\n      }\n    }\n    while (n) {\n      store<u8>(dest++, load<u8>(src++));\n      --n;\n    }\n  } else {\n    if ((src & 7) == (dest & 7)) {\n      while ((dest + n) & 7) {\n        if (!n) return;\n        store<u8>(dest + --n, load<u8>(src + n));\n      }\n      while (n >= 8) {\n        n -= 8;\n        store<u64>(dest + n, load<u64>(src + n));\n      }\n    }\n    while (n) {\n      store<u8>(dest + --n, load<u8>(src + n));\n    }\n  }\n}\n\n// this function will go away once `memory.fill` becomes an intrinsic\nexport function memset(dest: usize, c: u8, n: usize): void { // see: musl/src/string/memset\n\n  // fill head and tail with minimal branching\n  if (!n) return;\n  store<u8>(dest, c);\n  store<u8>(dest + n - 1, c);\n  if (n <= 2) return;\n\n  store<u8>(dest + 1, c);\n  store<u8>(dest + 2, c);\n  store<u8>(dest + n - 2, c);\n  store<u8>(dest + n - 3, c);\n  if (n <= 6) return;\n  store<u8>(dest + 3, c);\n  store<u8>(dest + n - 4, c);\n  if (n <= 8) return;\n\n  // advance pointer to align it at 4-byte boundary\n  var k: usize = -dest & 3;\n  dest += k;\n  n -= k;\n  n &= -4;\n\n  var c32: u32 = <u32>-1 / 255 * c;\n\n  // fill head/tail up to 28 bytes each in preparation\n  store<u32>(dest, c32);\n  store<u32>(dest + n - 4, c32);\n  if (n <= 8) return;\n  store<u32>(dest + 4, c32);\n  store<u32>(dest + 8, c32);\n  store<u32>(dest + n - 12, c32);\n  store<u32>(dest + n - 8, c32);\n  if (n <= 24) return;\n  store<u32>(dest + 12, c32);\n  store<u32>(dest + 16, c32);\n  store<u32>(dest + 20, c32);\n  store<u32>(dest + 24, c32);\n  store<u32>(dest + n - 28, c32);\n  store<u32>(dest + n - 24, c32);\n  store<u32>(dest + n - 20, c32);\n  store<u32>(dest + n - 16, c32);\n\n  // align to a multiple of 8\n  k = 24 + (dest & 4);\n  dest += k;\n  n -= k;\n\n  // copy 32 bytes each\n  var c64: u64 = <u64>c32 | (<u64>c32 << 32);\n  while (n >= 32) {\n    store<u64>(dest, c64);\n    store<u64>(dest + 8, c64);\n    store<u64>(dest + 16, c64);\n    store<u64>(dest + 24, c64);\n    n -= 32;\n    dest += 32;\n  }\n}\n\nexport function memcmp(vl: usize, vr: usize, n: usize): i32 { // see: musl/src/string/memcmp.c\n  if (vl == vr) return 0;\n  while (n != 0 && load<u8>(vl) == load<u8>(vr)) {\n    n--; vl++; vr++;\n  }\n  return n ? <i32>load<u8>(vl) - <i32>load<u8>(vr) : 0;\n}\n","import {\n  HEADER_SIZE as HEADER_SIZE_AB\n} from \"./internal/arraybuffer\";\n\nimport {\n  HASH\n} from \"./internal/hash\";\n\n// A deterministic hash map based on CloseTable from https://github.com/jorendorff/dht\n\nconst INITIAL_CAPACITY = 4;\nconst FILL_FACTOR: f64 = 8 / 3;\nconst FREE_FACTOR: f64 = 3 / 4;\n\n/** Structure of a map entry. */\n@unmanaged class MapEntry<K,V> {\n  key: K;\n  value: V;\n  taggedNext: usize; // LSB=1 indicates EMPTY\n}\n\n/** Empty bit. */\nconst EMPTY: usize = 1 << 0;\n\n/** Size of a bucket. */\nconst BUCKET_SIZE = sizeof<usize>();\n\n/** Computes the alignment of an entry. */\n@inline function ENTRY_ALIGN<K,V>(): usize {\n  // can align to 4 instead of 8 if 32-bit and K/V is <= 32-bits\n  const maxkv = sizeof<K>() > sizeof<V>() ? sizeof<K>() : sizeof<V>();\n  const align = (maxkv > sizeof<usize>() ? maxkv : sizeof<usize>()) - 1;\n  return align;\n}\n\n/** Computes the aligned size of an entry. */\n@inline function ENTRY_SIZE<K,V>(): usize {\n  const align = ENTRY_ALIGN<K,V>();\n  const size = (offsetof<MapEntry<K,V>>() + align) & ~align;\n  return size;\n}\n\nexport class Map<K,V> {\n\n  // buckets holding references to the respective first entry within\n  private buckets: ArrayBuffer; // usize[bucketsMask + 1]\n  private bucketsMask: u32;\n\n  // entries in insertion order\n  private entries: ArrayBuffer; // MapEntry<K,V>[entriesCapacity]\n  private entriesCapacity: i32;\n  private entriesOffset: i32;\n  private entriesCount: i32;\n\n  get size(): i32 { return this.entriesCount; }\n\n  constructor() { this.clear(); }\n\n  clear(): void {\n    const bucketsSize = INITIAL_CAPACITY * <i32>BUCKET_SIZE;\n    this.buckets = new ArrayBuffer(bucketsSize);\n    this.bucketsMask = INITIAL_CAPACITY - 1;\n    const entriesSize = INITIAL_CAPACITY * <i32>ENTRY_SIZE<K,V>();\n    this.entries = new ArrayBuffer(entriesSize, true);\n    this.entriesCapacity = INITIAL_CAPACITY;\n    this.entriesOffset = 0;\n    this.entriesCount = 0;\n  }\n\n  private find(key: K, hashCode: u32): MapEntry<K,V> | null {\n    var entry = load<MapEntry<K,V>>(\n      changetype<usize>(this.buckets) + <usize>(hashCode & this.bucketsMask) * BUCKET_SIZE,\n      HEADER_SIZE_AB\n    );\n    while (entry) {\n      if (!(entry.taggedNext & EMPTY) && entry.key == key) return entry;\n      entry = changetype<MapEntry<K,V>>(entry.taggedNext & ~EMPTY);\n    }\n    return null;\n  }\n\n  has(key: K): bool {\n    return this.find(key, HASH<K>(key)) !== null;\n  }\n\n  get(key: K): V {\n    var entry = this.find(key, HASH<K>(key));\n    return entry ? entry.value : <V>unreachable();\n  }\n\n  set(key: K, value: V): void {\n    var hashCode = HASH<K>(key);\n    var entry = this.find(key, hashCode);\n    if (entry) {\n      entry.value = value;\n    } else {\n      // check if rehashing is necessary\n      if (this.entriesOffset == this.entriesCapacity) {\n        this.rehash(\n          this.entriesCount < <i32>(this.entriesCapacity * FREE_FACTOR)\n            ?  this.bucketsMask           // just rehash if 1/4+ entries are empty\n            : (this.bucketsMask << 1) | 1 // grow capacity to next 2^N\n        );\n      }\n      // append new entry\n      let entries = this.entries;\n      entry = changetype<MapEntry<K,V>>(\n        changetype<usize>(entries) + HEADER_SIZE_AB + this.entriesOffset++ * ENTRY_SIZE<K,V>()\n      );\n      entry.key = key;\n      entry.value = value;\n      ++this.entriesCount;\n      // link with previous entry in bucket\n      let bucketPtrBase = changetype<usize>(this.buckets) + <usize>(hashCode & this.bucketsMask) * BUCKET_SIZE;\n      entry.taggedNext = load<usize>(bucketPtrBase, HEADER_SIZE_AB);\n      store<usize>(bucketPtrBase, changetype<usize>(entry), HEADER_SIZE_AB);\n      if (isManaged<K>()) __gc_link(changetype<usize>(this), changetype<usize>(key)); // tslint:disable-line\n      if (isManaged<V>()) __gc_link(changetype<usize>(this), changetype<usize>(value)); // tslint:disable-line\n    }\n  }\n\n  delete(key: K): bool {\n    var entry = this.find(key, HASH<K>(key));\n    if (!entry) return false;\n    entry.taggedNext |= EMPTY;\n    --this.entriesCount;\n    // check if rehashing is appropriate\n    var halfBucketsMask = this.bucketsMask >> 1;\n    if (\n      halfBucketsMask + 1 >= max<u32>(INITIAL_CAPACITY, this.entriesCount) &&\n      this.entriesCount < <i32>(this.entriesCapacity * FREE_FACTOR)\n    ) this.rehash(halfBucketsMask);\n    return true;\n  }\n\n  private rehash(newBucketsMask: u32): void {\n    var newBucketsCapacity = <i32>(newBucketsMask + 1);\n    var newBuckets = new ArrayBuffer(newBucketsCapacity * <i32>BUCKET_SIZE);\n    var newEntriesCapacity = <i32>(newBucketsCapacity * FILL_FACTOR);\n    var newEntries = new ArrayBuffer(newEntriesCapacity * <i32>ENTRY_SIZE<K,V>(), true);\n\n    // copy old entries to new entries\n    var oldPtr = changetype<usize>(this.entries) + HEADER_SIZE_AB;\n    var oldEnd = oldPtr + <usize>this.entriesOffset * ENTRY_SIZE<K,V>();\n    var newPtr = changetype<usize>(newEntries) + HEADER_SIZE_AB;\n    while (oldPtr != oldEnd) {\n      let oldEntry = changetype<MapEntry<K,V>>(oldPtr);\n      if (!(oldEntry.taggedNext & EMPTY)) {\n        let newEntry = changetype<MapEntry<K,V>>(newPtr);\n        newEntry.key = oldEntry.key;\n        newEntry.value = oldEntry.value;\n        let newBucketIndex = HASH<K>(oldEntry.key) & newBucketsMask;\n        let newBucketPtrBase = changetype<usize>(newBuckets) + <usize>newBucketIndex * BUCKET_SIZE;\n        newEntry.taggedNext = load<usize>(newBucketPtrBase, HEADER_SIZE_AB);\n        store<usize>(newBucketPtrBase, newPtr, HEADER_SIZE_AB);\n        newPtr += ENTRY_SIZE<K,V>();\n      }\n      oldPtr += ENTRY_SIZE<K,V>();\n    }\n\n    this.buckets = newBuckets;\n    this.bucketsMask = newBucketsMask;\n    this.entries = newEntries;\n    this.entriesCapacity = newEntriesCapacity;\n    this.entriesOffset = this.entriesCount;\n  }\n\n  toString(): string {\n    return \"[object Map]\";\n  }\n\n  private __gc(): void {\n    __gc_mark(changetype<usize>(this.buckets)); // tslint:disable-line\n    var entries = this.entries;\n    __gc_mark(changetype<usize>(entries)); // tslint:disable-line\n    if (isManaged<K>() || isManaged<V>()) {\n      let offset: usize = 0;\n      let end: usize = this.entriesOffset * ENTRY_SIZE<K,V>();\n      while (offset < end) {\n        let entry = changetype<MapEntry<K,V>>(\n          changetype<usize>(entries) + HEADER_SIZE_AB + offset * ENTRY_SIZE<K,V>()\n        );\n        if (!(entry.taggedNext & EMPTY)) {\n          if (isManaged<K>()) __gc_mark(changetype<usize>(entry.key)); // tslint:disable-line\n          if (isManaged<V>()) __gc_mark(changetype<usize>(entry.value)); // tslint:disable-line\n        }\n        offset += ENTRY_SIZE<K,V>();\n      }\n    }\n  }\n}\n","import {\n  HEADER_SIZE,\n  MAX_BLENGTH,\n  allocateUnsafe\n} from \"./internal/arraybuffer\";\n\n@sealed\nexport class ArrayBuffer {\n\n  readonly byteLength: i32; // capped to [0, MAX_LENGTH]\n\n  // @unsafe\n  get data(): usize { return changetype<usize>(this) + HEADER_SIZE; }\n\n  constructor(length: i32, unsafe: bool = false) {\n    if (<u32>length > <u32>MAX_BLENGTH) throw new RangeError(\"Invalid array buffer length\");\n    var buffer = allocateUnsafe(length);\n    if (!unsafe) memory.fill(changetype<usize>(buffer) + HEADER_SIZE, 0, <usize>length);\n    return buffer;\n  }\n\n  slice(begin: i32 = 0, end: i32 = MAX_BLENGTH): ArrayBuffer {\n    var len = this.byteLength;\n    if (begin < 0) begin = max(len + begin, 0);\n    else begin = min(begin, len);\n    if (end < 0) end = max(len + end, 0);\n    else end = min(end, len);\n    var newLen = max(end - begin, 0);\n    var buffer = allocateUnsafe(newLen);\n    memory.copy(changetype<usize>(buffer) + HEADER_SIZE, changetype<usize>(this) + HEADER_SIZE + begin, newLen);\n    return buffer;\n  }\n\n  toString(): string {\n    return \"[object ArrayBuffer]\";\n  }\n}\n","import {\r\n  CanvasInstruction,\r\n  Direction,\r\n  FillRule,\r\n  GlobalCompositeOperation,\r\n  ImageSmoothingQuality,\r\n  LineCap,\r\n  LineJoin,\r\n  TextAlign,\r\n  TextBaseline,\r\n} from \"../shared\";\r\nimport { Serializer } from \"./Serializer\";\r\nimport { ImageBitmap } from \"../primitives\";\r\nimport { send_string_to_js } from \"../linked\";\r\n\r\nexport class CanvasRenderingContext2DSerializer extends Serializer<CanvasInstruction> {\r\n  private _stringMap: Map<string, i32> = new Map<string, i32>();\r\n  private _stringIndex: i32 = -1;\r\n\r\n  public init(): void {\r\n    super.init();\r\n  }\r\n\r\n  @inline\r\n  protected write_arc(x: f64, y: f64, radius: f64, startAngle: f64, endAngle: f64, anticlockwise: bool): void {\r\n    this.write_six(\r\n      CanvasInstruction.Arc,\r\n      x,\r\n      y,\r\n      radius,\r\n      startAngle,\r\n      endAngle,\r\n      anticlockwise ? 1.0 : 0.0,\r\n    );\r\n  }\r\n\r\n  @inline\r\n  protected write_arc_to(x1: f64, y1: f64, x2: f64, y2: f64, radius: f64): void {\r\n    this.write_five(\r\n      CanvasInstruction.ArcTo,\r\n      x1,\r\n      y1,\r\n      x2,\r\n      y2,\r\n      radius,\r\n    );\r\n  }\r\n\r\n  @inline\r\n  protected write_begin_path(): void {\r\n    this.write_zero(CanvasInstruction.BeginPath);\r\n  }\r\n\r\n  @inline\r\n  protected write_bezier_curve_to(cp1x: f64, cp1y: f64, cp2x: f64, cp2y: f64, x: f64, y: f64): void {\r\n    this.write_six(\r\n      CanvasInstruction.BezierCurveTo,\r\n      cp1x,\r\n      cp1y,\r\n      cp2x,\r\n      cp2y,\r\n      x,\r\n      y,\r\n    );\r\n  }\r\n\r\n  @inline\r\n  protected write_clear_rect(x: f64, y: f64, width: f64, height: f64): void {\r\n    this.write_four(\r\n      CanvasInstruction.ClearRect,\r\n      x,\r\n      y,\r\n      width,\r\n      height,\r\n    );\r\n  }\r\n\r\n  @inline\r\n  protected write_clip(fillRule: FillRule): void {\r\n    this.write_one(\r\n      CanvasInstruction.Clip,\r\n      <f64>fillRule,\r\n    );\r\n  }\r\n\r\n  @inline\r\n  protected write_close_path(): void {\r\n    this.write_zero(CanvasInstruction.ClosePath);\r\n  }\r\n\r\n  @inline\r\n  protected write_direction(value: Direction): void {\r\n    this.write_one(\r\n      CanvasInstruction.Direction,\r\n      <f64>value,\r\n    );\r\n  }\r\n\r\n  @inline\r\n  protected write_draw_focus_if_needed(): void {\r\n    this.write_zero(CanvasInstruction.DrawFocusIfNeeded);\r\n  }\r\n\r\n  @inline\r\n  protected write_draw_image(img: ImageBitmap, x: f64, y: f64, width: f64, height: f64, sx: f64, sy: f64, swidth: f64, sheight: f64): void {\r\n    this.write_nine(\r\n      CanvasInstruction.DrawImage,\r\n      <f64>img._index,\r\n      x,\r\n      y,\r\n      width,\r\n      height,\r\n      sx,\r\n      sy,\r\n      swidth,\r\n      sheight,\r\n    );\r\n  }\r\n\r\n  @inline\r\n  protected write_ellipse(x: f64, y: f64, radiusX: f64, radiusY: f64, rotation: f64, startAngle: f64, endAngle: f64, anticlockwise: bool): void {\r\n    this.write_eight(\r\n      CanvasInstruction.Ellipse,\r\n      x,\r\n      y,\r\n      radiusX,\r\n      radiusY,\r\n      rotation,\r\n      startAngle,\r\n      endAngle,\r\n      anticlockwise ? 1.0 : 0.0,\r\n    );\r\n  }\r\n\r\n  @inline\r\n  protected write_fill(fillRule: FillRule = FillRule.nonzero): void {\r\n    this.write_one(\r\n      CanvasInstruction.Fill,\r\n      <f64>fillRule,\r\n    );\r\n  }\r\n\r\n  @inline\r\n  protected write_fill_rect(x: f64, y: f64, width: f64, height: f64): void {\r\n    this.write_four(\r\n      CanvasInstruction.FillRect,\r\n      x,\r\n      y,\r\n      width,\r\n      height,\r\n    );\r\n  }\r\n\r\n  @inline\r\n  protected write_fill_style(value: string): void {\r\n    this.write_one(\r\n      CanvasInstruction.FillStyle,\r\n      this.send_string(value),\r\n    );\r\n  }\r\n\r\n  @inline\r\n  protected write_fill_text(text: string, x: f64, y: f64, maxWidth: f64): void {\r\n    this.write_four(\r\n      CanvasInstruction.FillText,\r\n      this.send_string(text),\r\n      x,\r\n      y,\r\n      maxWidth,\r\n    );\r\n  }\r\n\r\n  @inline\r\n  protected write_filter(value: string): void {\r\n    this.write_one(\r\n      CanvasInstruction.Filter,\r\n      this.send_string(value),\r\n    );\r\n  }\r\n\r\n  @inline\r\n  protected write_font(value: string): void {\r\n    this.write_one(\r\n      CanvasInstruction.Font,\r\n      this.send_string(value),\r\n    )\r\n  }\r\n\r\n  @inline\r\n  protected write_global_alpha(value: f64): void {\r\n    this.write_one(\r\n      CanvasInstruction.GlobalAlpha,\r\n      value,\r\n    );\r\n  }\r\n\r\n  @inline\r\n  protected write_global_composite_operation(value: GlobalCompositeOperation): void {\r\n    this.write_one(\r\n      CanvasInstruction.GlobalCompositeOperation,\r\n      <f64>value,\r\n    )\r\n  }\r\n\r\n  @inline\r\n  protected write_image_smoothing_enabled(value: bool): void {\r\n    this.write_one(\r\n      CanvasInstruction.ImageSmoothingEnabled,\r\n      value ? 1.0 : 0.0,\r\n    );\r\n  }\r\n\r\n  @inline\r\n  protected write_image_smoothing_quality(value: ImageSmoothingQuality): void {\r\n    this.write_one(\r\n      CanvasInstruction.ImageSmoothingQuality,\r\n      <f64>value,\r\n    );\r\n  }\r\n\r\n  @inline\r\n  protected write_line_cap(value: LineCap): void {\r\n    this.write_one(\r\n      CanvasInstruction.LineCap,\r\n      <f64>value,\r\n    );\r\n  }\r\n\r\n  @inline\r\n  protected write_line_dash(lineDash: f64[]): void {\r\n    this.write_variable(\r\n      CanvasInstruction.LineDash,\r\n      lineDash,\r\n    );\r\n  }\r\n\r\n  @inline\r\n  protected write_line_dash_offset(value: f64): void {\r\n    this.write_one(\r\n      CanvasInstruction.LineDashOffset,\r\n      <f64>value,\r\n    );\r\n  }\r\n\r\n  @inline\r\n  protected write_line_join(value: LineJoin): void {\r\n    this.write_one(\r\n      CanvasInstruction.LineJoin,\r\n      <f64>value,\r\n    );\r\n  }\r\n\r\n  @inline\r\n  protected write_line_to(x: f64, y: f64): void {\r\n    this.write_two(\r\n      CanvasInstruction.LineTo,\r\n      x,\r\n      y,\r\n    );\r\n  }\r\n\r\n  @inline\r\n  protected write_line_width(value: f64): void {\r\n    this.write_one(\r\n      CanvasInstruction.LineWidth,\r\n      <f64>value,\r\n    );\r\n  }\r\n\r\n  @inline\r\n  protected write_miter_limit(value: f64): void {\r\n    this.write_one(\r\n      CanvasInstruction.MiterLimit,\r\n      value,\r\n    );\r\n  }\r\n\r\n  @inline\r\n  protected write_move_to(x: f64, y: f64): void {\r\n    this.write_two(\r\n      CanvasInstruction.MoveTo,\r\n      x,\r\n      y,\r\n    );\r\n  }\r\n\r\n  @inline\r\n  protected write_quadratic_curve_to(cpx: f64, cpy: f64, x: f64, y: f64): void {\r\n    this.write_four(\r\n      CanvasInstruction.QuadraticCurveTo,\r\n      cpx,\r\n      cpy,\r\n      x,\r\n      y,\r\n    );\r\n  }\r\n\r\n  @inline\r\n  protected write_rect(x: f64, y: f64, width: f64, height: f64): void {\r\n    this.write_four(\r\n      CanvasInstruction.Rect,\r\n      x,\r\n      y,\r\n      width,\r\n      height,\r\n    );\r\n  }\r\n\r\n  @inline\r\n  protected write_restore(): void {\r\n    this.write_zero(CanvasInstruction.Restore);\r\n  }\r\n\r\n  @inline\r\n  protected write_rotate(angle: f64): void {\r\n    this.write_one(\r\n      CanvasInstruction.Rotate,\r\n      angle,\r\n    );\r\n  }\r\n\r\n  @inline\r\n  protected write_save(): void {\r\n    this.write_zero(CanvasInstruction.Save);\r\n  }\r\n\r\n  @inline\r\n  protected write_scale(x: f64, y: f64): void {\r\n    this.write_two(\r\n      CanvasInstruction.Scale,\r\n      x,\r\n      y,\r\n    );\r\n  }\r\n\r\n  @inline\r\n  protected write_set_transform(a: f64, b: f64, c: f64, d: f64, e: f64, f: f64 ): void {\r\n    this.write_six(\r\n      CanvasInstruction.SetTransform,\r\n      a,\r\n      b,\r\n      c,\r\n      d,\r\n      e,\r\n      f,\r\n    );\r\n  }\r\n\r\n  @inline\r\n  protected write_shadow_blur(value: f64): void {\r\n    this.write_one(\r\n      CanvasInstruction.ShadowBlur,\r\n      value,\r\n    );\r\n  }\r\n\r\n  @inline\r\n  protected write_shadow_color(value: string): void {\r\n    this.write_one(\r\n      CanvasInstruction.ShadowColor,\r\n      this.send_string(value),\r\n    );\r\n  }\r\n\r\n  @inline\r\n  protected write_shadow_offset_x(value: f64): void {\r\n    this.write_one(\r\n      CanvasInstruction.ShadowOffsetX,\r\n      value,\r\n    );\r\n  }\r\n\r\n  @inline\r\n  protected write_shadow_offset_y(value: f64): void {\r\n    this.write_one(\r\n      CanvasInstruction.ShadowOffsetY,\r\n      value,\r\n    );\r\n  }\r\n\r\n  @inline\r\n  protected write_stroke(): void {\r\n    this.write_zero(CanvasInstruction.Stroke);\r\n  }\r\n\r\n  @inline\r\n  protected write_stroke_rect(x: f64, y: f64, width: f64, height: f64): void {\r\n    this.write_four(\r\n      CanvasInstruction.StrokeRect,\r\n      x,\r\n      y,\r\n      width,\r\n      height,\r\n    );\r\n  }\r\n\r\n  @inline\r\n  protected write_stroke_style(value: string): void {\r\n    this.write_one(\r\n      CanvasInstruction.StrokeStyle,\r\n      this.send_string(value),\r\n    )\r\n  }\r\n\r\n  @inline\r\n  protected write_stroke_text(text: string, x: f64, y: f64, maxWidth: f64): void {\r\n    this.write_four(\r\n      CanvasInstruction.StrokeText,\r\n      this.send_string(text),\r\n      x,\r\n      y,\r\n      maxWidth,\r\n    );\r\n  }\r\n\r\n  @inline\r\n  protected write_text_align(value: TextAlign): void {\r\n    this.write_one(\r\n      CanvasInstruction.TextAlign,\r\n      <f64>value,\r\n    );\r\n  }\r\n\r\n  @inline\r\n  protected write_text_baseline(value: TextBaseline): void {\r\n    this.write_one(\r\n      CanvasInstruction.TextBaseline,\r\n      <f64>value,\r\n    );\r\n  }\r\n\r\n  @inline\r\n  protected write_transform(a: f64, b: f64, c: f64, d: f64, e: f64, f: f64): void {\r\n    this.write_six(\r\n      CanvasInstruction.Transform,\r\n      a,\r\n      b,\r\n      c,\r\n      d,\r\n      e,\r\n      f,\r\n    );\r\n  }\r\n\r\n  @inline\r\n  protected write_translate(x: f64, y: f64): void {\r\n    this.write_two(\r\n      CanvasInstruction.Translate,\r\n      x,\r\n      y,\r\n    );\r\n  }\r\n\r\n  @inline\r\n  protected write_commit(): void {\r\n    this.write_zero(CanvasInstruction.Commit);\r\n    this.index = 0;\r\n  }\r\n\r\n  @inline\r\n  protected send_string(value: string): f64 {\r\n    if (this._stringMap.has(value)) {\r\n      return <f64>this._stringMap.get(value);\r\n    }\r\n    ++this._stringIndex;\r\n    this._stringMap.set(value, this._stringIndex);\r\n    send_string_to_js(this._stringIndex, value);\r\n    return <f64>this._stringIndex;\r\n  }\r\n}\r\n","import { CanvasRenderingContext2DSerializer } from \"./CanvasRenderingContext2DSerializer\";\r\nimport {\r\n  Direction,\r\n  GlobalCompositeOperation,\r\n  ImageSmoothingQuality,\r\n  LineCap,\r\n  LineJoin,\r\n  TextAlign,\r\n  TextBaseline,\r\n  CanvasInstruction,\r\n} from \"../shared\";\r\nimport { Path2DElement, Matrix, ImageBitmap } from \"../primitives\";\r\n\r\nexport class OptimizedCanvasRenderingContext2D extends CanvasRenderingContext2DSerializer {\r\n  private _direction: Direction[] = new Array<Direction>(0);\r\n  private _directionCurrent: Direction;\r\n  private _fillStyle: string[] = new Array<string>(0);\r\n  private _fillStyleCurrent: string;\r\n  private _filter: string[] = new Array<string>(0);\r\n  private _filterCurrent: string;\r\n  private _font: string[] = new Array<string>(0);\r\n  private _fontCurrent: string;\r\n  private _globalAlpha: f64[] = new Array<f64>(0);\r\n  private _globalAlphaCurrent: f64;\r\n  private _globalCompositeOperation: GlobalCompositeOperation[] = new Array<GlobalCompositeOperation>(0);\r\n  private _globalCompositeOperationCurrent: GlobalCompositeOperation;\r\n  private _imageSmoothingEnabled: bool[] = new Array<bool>(0);\r\n  private _imageSmoothingEnabledCurrent: bool;\r\n  private _imageSmoothingQuality: ImageSmoothingQuality[] = new Array<ImageSmoothingQuality>(0);\r\n  private _imageSmoothingQualityCurrent: ImageSmoothingQuality;\r\n  private _lineCap: LineCap[] = new Array<LineCap>(0);\r\n  private _lineCapCurrent: LineCap;\r\n  private _lineDash: f64[][] = new Array<f64[]>(0);\r\n  private _lineDashCurrent: f64[];\r\n  private _lineDashOffset: f64[] = new Array<f64>(0);\r\n  private _lineDashOffsetCurrent: f64;\r\n  private _lineJoin: LineJoin[] = new Array<LineJoin>(0);\r\n  private _lineJoinCurrent: LineJoin;\r\n  private _lineWidth: f64[] = new Array<f64>(0);\r\n  private _lineWidthCurrent: f64;\r\n  private _miterLimit: f64[] = new Array<f64>(0);\r\n  private _miterLimitCurrent: f64;\r\n  private _transformA: f64[] = new Array<f64>(0);\r\n  private _transformACurrent: f64;\r\n  private _transformB: f64[] = new Array<f64>(0);\r\n  private _transformBCurrent: f64;\r\n  private _transformC: f64[] = new Array<f64>(0);\r\n  private _transformCCurrent: f64;\r\n  private _transformD: f64[] = new Array<f64>(0);\r\n  private _transformDCurrent: f64;\r\n  private _transformE: f64[] = new Array<f64>(0);\r\n  private _transformECurrent: f64;\r\n  private _transformF: f64[] = new Array<f64>(0);\r\n  private _transformFCurrent: f64;\r\n  private _shadowBlur: f64[] = new Array<f64>(0);\r\n  private _shadowBlurCurrent: f64;\r\n  private _shadowColor: string[] = new Array<string>(0);\r\n  private _shadowColorCurrent: string;\r\n  private _shadowOffsetX: f64[] = new Array<f64>(0);\r\n  private _shadowOffsetXCurrent: f64;\r\n  private _shadowOffsetY: f64[] = new Array<f64>(0);\r\n  private _shadowOffsetYCurrent: f64;\r\n  private _strokeStyle: string[] = new Array<string>(0);\r\n  private _strokeStyleCurrent: string;\r\n  private _textAlign: TextAlign[] = new Array<TextAlign>(0);\r\n  private _textAlignCurrent: TextAlign;\r\n  private _textBaseline: TextBaseline[] = new Array<TextBaseline>(0);\r\n  private _textBaselineCurrent: TextBaseline;\r\n  private _stackIndex: i32 = 0;\r\n\r\n  // path variables\r\n  private _path: Path2DElement[] = new Array<Path2DElement>(1000);\r\n  private _pathIndex: i32 = 0;\r\n\r\n  private _hardSave: bool[] = new Array<bool>(0);\r\n\r\n  init(): void {\r\n    var i: i32 = 0;\r\n    while (i < 100) {\r\n      this._direction.push(Direction.inherit);\r\n      this._fillStyle.push(\"#000\");\r\n      this._filter.push(\"none\");\r\n      this._font.push(\"none\");\r\n      this._globalAlpha.push(1.0);\r\n      this._globalCompositeOperation.push(GlobalCompositeOperation.source_over);\r\n      this._imageSmoothingEnabled.push(true);\r\n      this._imageSmoothingQuality.push(ImageSmoothingQuality.low);\r\n      this._lineCap.push(LineCap.butt);\r\n      this._lineDash.push([]);\r\n      this._lineDashOffset.push(0.0);\r\n      this._lineJoin.push(LineJoin.miter);\r\n      this._lineWidth.push(1.0);\r\n      this._miterLimit.push(10.0);\r\n      this._transformA.push(1.0);\r\n      this._transformB.push(0.0);\r\n      this._transformC.push(0.0);\r\n      this._transformD.push(1.0);\r\n      this._transformE.push(0.0);\r\n      this._transformF.push(0.0);\r\n      this._shadowBlur.push(0.0);\r\n      this._shadowColor.push(\"#000\");\r\n      this._shadowOffsetX.push(0.0);\r\n      this._shadowOffsetY.push(0.0);\r\n      this._strokeStyle.push(\"#000\");\r\n      this._textAlign.push(TextAlign.start);\r\n      this._textBaseline.push(TextBaseline.alphabetic);\r\n      this._hardSave.push(false);\r\n      this._path.push(new Path2DElement());\r\n      ++i;\r\n    }\r\n    this._directionCurrent = Direction.inherit;\r\n    this._fillStyleCurrent = \"#000\";\r\n    this._filterCurrent = \"none\";\r\n    this._fontCurrent = \"none\";\r\n    this._globalAlphaCurrent = 1.0;\r\n    this._globalCompositeOperationCurrent = GlobalCompositeOperation.source_over;\r\n    this._imageSmoothingEnabledCurrent = true;\r\n    this._imageSmoothingQualityCurrent = ImageSmoothingQuality.low;\r\n    this._lineCapCurrent = LineCap.butt;\r\n    this._lineDashCurrent = [];\r\n    this._lineDashOffsetCurrent = 0.0;\r\n    this._lineJoinCurrent = LineJoin.miter;\r\n    this._lineWidthCurrent = 1.0;\r\n    this._miterLimitCurrent = 10.0;\r\n    this._transformACurrent = 1.0;\r\n    this._transformBCurrent = 0.0;\r\n    this._transformCCurrent = 0.0;\r\n    this._transformDCurrent = 1.0;\r\n    this._transformECurrent = 0.0;\r\n    this._transformFCurrent = 0.0;\r\n    this._shadowBlurCurrent = 0.0;\r\n    this._shadowColorCurrent = \"#000\";\r\n    this._shadowOffsetXCurrent = 0.0;\r\n    this._shadowOffsetYCurrent = 0.0;\r\n    this._strokeStyleCurrent = \"#000\";\r\n    this._textAlignCurrent = TextAlign.start;\r\n    this._textBaselineCurrent = TextBaseline.alphabetic;\r\n    this.write_path_zero(CanvasInstruction.BeginPath, true);\r\n    super.init();\r\n  }\r\n\r\n  public save(): void {\r\n    var current: i32 = this._stackIndex;\r\n    var next: i32 = current + 1;\r\n    this._direction[next] = this.direction;\r\n    this._fillStyle[next] = this.fillStyle;\r\n    this._filter[next] = this.filter;\r\n    this._font[next] = this.font;\r\n    this._globalAlpha[next] = this.globalAlpha;\r\n    this._globalCompositeOperation[next] = this.globalCompositeOperation;\r\n    this._imageSmoothingEnabled[next] = this.imageSmoothingEnabled;\r\n    this._imageSmoothingQuality[next] = this.imageSmoothingQuality;\r\n    this._lineCap[next] = this.lineCap;\r\n    this._lineDash[next] = this.getLineDash();\r\n    this._lineDashOffset[next] = this.lineDashOffset;\r\n    this._lineJoin[next] = this.lineJoin;\r\n    this._lineWidth[next] = this.lineWidth;\r\n    this._miterLimit[next] = this.miterLimit;\r\n    this._transformA[next] = this._transformA[current];\r\n    this._transformB[next] = this._transformB[current];\r\n    this._transformC[next] = this._transformC[current];\r\n    this._transformD[next] = this._transformD[current];\r\n    this._transformE[next] = this._transformE[current];\r\n    this._transformF[next] = this._transformF[current];\r\n    this._shadowBlur[next] = this.shadowBlur;\r\n    this._shadowColor[next] = this.shadowColor;\r\n    this._shadowOffsetX[next] = this.shadowOffsetX;\r\n    this._shadowOffsetY[next] = this.shadowOffsetY;\r\n    this._strokeStyle[next] = this.strokeStyle;\r\n    this._textAlign[next] = this.textAlign;\r\n    this._textBaseline[next] = this.textBaseline;\r\n    this._hardSave[next] = false;\r\n    if (this._hardSave[current]) {\r\n      this.write_save();\r\n    }\r\n    this._stackIndex = next;\r\n  }\r\n\r\n  public restore(): void {\r\n    if (this._stackIndex == 0) return;\r\n    if (this._hardSave[this._stackIndex]) {\r\n      --this._stackIndex;\r\n      this._directionCurrent = this.direction;\r\n      this._fillStyleCurrent = this.fillStyle;\r\n      this._filterCurrent = this.filter;\r\n      this._fontCurrent = this.font;\r\n      this._globalAlphaCurrent = this.globalAlpha;\r\n      this._globalCompositeOperationCurrent = this.globalCompositeOperation;\r\n      this._imageSmoothingEnabledCurrent = this.imageSmoothingEnabled;\r\n      this._imageSmoothingQualityCurrent = this.imageSmoothingQuality;\r\n      this._lineCapCurrent = this.lineCap;\r\n      this._lineDashCurrent = this.getLineDash();\r\n      this._lineDashOffsetCurrent = this.lineDashOffset;\r\n      this._lineJoinCurrent = this.lineJoin;\r\n      this._lineWidthCurrent = this.lineWidth;\r\n      this._miterLimitCurrent = this.miterLimit;\r\n      this._transformACurrent = this._transformA[this._stackIndex];\r\n      this._transformBCurrent = this._transformB[this._stackIndex];\r\n      this._transformCCurrent = this._transformC[this._stackIndex];\r\n      this._transformDCurrent = this._transformD[this._stackIndex];\r\n      this._transformECurrent = this._transformE[this._stackIndex];\r\n      this._transformFCurrent = this._transformF[this._stackIndex];\r\n      this._shadowBlurCurrent = this.shadowBlur;\r\n      this._shadowColorCurrent = this.shadowColor;\r\n      this._shadowOffsetXCurrent = this.shadowOffsetX;\r\n      this._shadowOffsetYCurrent = this.shadowOffsetY;\r\n      this._strokeStyleCurrent = this.strokeStyle;\r\n      this._textAlignCurrent = this.textAlign;\r\n      this._textBaselineCurrent = this.textBaseline;\r\n      this.write_restore();\r\n    } else {\r\n      --this._stackIndex;\r\n    }\r\n  }\r\n\r\n  public commit(): Float64Array {\r\n    super.write_commit();\r\n    super.index = 0;\r\n    return super.data;\r\n  }\r\n\r\n  public arc(x: f64, y: f64, radius: f64, startAngle: f64, endAngle: f64, anticlockwise: bool = false): void {\r\n    this.write_path_six(\r\n      CanvasInstruction.Arc,\r\n      true,\r\n      x,\r\n      y,\r\n      radius,\r\n      startAngle,\r\n      endAngle,\r\n      anticlockwise ? 1.0 : 0.0,\r\n    );\r\n  }\r\n\r\n  public arcTo(x1: f64, y1: f64, x2: f64, y2: f64, radius: f64): void {\r\n    this.write_path_five(\r\n      CanvasInstruction.ArcTo,\r\n      true,\r\n      x1,\r\n      y1,\r\n      x2,\r\n      y2,\r\n      radius,\r\n    );\r\n  }\r\n\r\n  public beginPath(): void {\r\n    this._pathIndex = 1;\r\n  }\r\n\r\n  public bezierCurveTo(cp1x: f64, cp1y: f64, cp2x: f64, cp2y: f64, x: f64, y: f64): void {\r\n    this.write_path_six(\r\n      CanvasInstruction.BezierCurveTo,\r\n      true,\r\n      cp1x,\r\n      cp1y,\r\n      cp2x,\r\n      cp2y,\r\n      x,\r\n      y,\r\n    );\r\n  }\r\n\r\n  public clearRect(x: f64, y: f64, width: f64, height: f64): void {\r\n    this.update_transform();\r\n    this.write_clear_rect(x, y, width, height);\r\n  }\r\n\r\n  public clip(): void {\r\n    if (this._pathIndex == 1) return;\r\n    this._hardSave[this._stackIndex] = true;\r\n    this.write_path_zero(CanvasInstruction.Clip, false);\r\n    this.update_path();\r\n  }\r\n\r\n  public closePath(): void {\r\n    if (this._pathIndex == 1) return;\r\n    this.write_path_zero(CanvasInstruction.ClosePath, false);\r\n  }\r\n\r\n  get currentTransform(): Matrix {\r\n    return Matrix.create(\r\n      this._transformA[this._stackIndex],\r\n      this._transformB[this._stackIndex],\r\n      this._transformC[this._stackIndex],\r\n      this._transformD[this._stackIndex],\r\n      this._transformE[this._stackIndex],\r\n      this._transformF[this._stackIndex],\r\n    );\r\n  }\r\n\r\n  set currentTransform(value: Matrix) {\r\n    this._transformA[this._stackIndex] = value.a;\r\n    this._transformB[this._stackIndex] = value.b;\r\n    this._transformC[this._stackIndex] = value.c;\r\n    this._transformD[this._stackIndex] = value.d;\r\n    this._transformE[this._stackIndex] = value.e;\r\n    this._transformF[this._stackIndex] = value.f;\r\n  }\r\n\r\n  get direction(): Direction {\r\n    return this._direction[this._stackIndex];\r\n  }\r\n\r\n  set direction(value: Direction) {\r\n    this._direction[this._stackIndex] = value;\r\n  }\r\n\r\n  public drawImage(img: ImageBitmap, x: f64, y: f64, width: f64, height: f64, sx: f64, sy: f64, swidth: f64, sheight: f64): void {\r\n    if (!img._loaded) return;\r\n    if (this.globalAlpha == 0.0) return;\r\n    this.update_filter();\r\n    this.update_global_alpha();\r\n    this.update_global_composite_operation();\r\n    this.update_image_smoothing_enabled();\r\n    this.update_image_smoothing_quality();\r\n    this.update_shadow_blur();\r\n    this.update_shadow_color();\r\n    this.update_shadow_offset_x();\r\n    this.update_shadow_offset_y();\r\n    this.update_transform();\r\n    super.write_draw_image(img, x, y, width, height, sx, sy, swidth, sheight);\r\n  }\r\n\r\n  public drawImagePosition(img: ImageBitmap, x: f64, y: f64): void {\r\n    if (!img._loaded) return;\r\n    if (this.globalAlpha == 0.0) return;\r\n    this.update_filter();\r\n    this.update_global_alpha();\r\n    this.update_global_composite_operation();\r\n    this.update_image_smoothing_enabled();\r\n    this.update_image_smoothing_quality();\r\n    this.update_shadow_blur();\r\n    this.update_shadow_color();\r\n    this.update_shadow_offset_x();\r\n    this.update_shadow_offset_y();\r\n    this.update_transform();\r\n    super.write_draw_image(img, x, y, img.width, img.height, 0.0, 0.0, img.width, img.height);\r\n  }\r\n\r\n  public drawImageSize(img: ImageBitmap, x: f64, y: f64, width: f64, height: f64): void {\r\n    if (!img._loaded) return;\r\n    if (this.globalAlpha == 0.0) return;\r\n    this.update_filter();\r\n    this.update_global_alpha();\r\n    this.update_global_composite_operation();\r\n    this.update_image_smoothing_enabled();\r\n    this.update_image_smoothing_quality();\r\n    this.update_shadow_blur();\r\n    this.update_shadow_color();\r\n    this.update_shadow_offset_x();\r\n    this.update_shadow_offset_y();\r\n    this.update_transform();\r\n    super.write_draw_image(img, x, y, width, height, 0.0, 0.0, img.width, img.height);\r\n  }\r\n\r\n  public ellipse(x: f64, y: f64, radiusX: f64, radiusY: f64, rotation: f64, startAngle: f64, endAngle: f64, anticlockwise: bool = false): void {\r\n    this.write_path_eight(\r\n      CanvasInstruction.Ellipse,\r\n      true,\r\n      x,\r\n      y,\r\n      radiusX,\r\n      radiusY,\r\n      rotation,\r\n      startAngle,\r\n      endAngle,\r\n      anticlockwise ? 1.0 : 0.0,\r\n    );\r\n  }\r\n\r\n  get filter(): string {\r\n    return this._filter[this._stackIndex];\r\n  }\r\n\r\n  set filter(value: string) {\r\n    this._filter[this._stackIndex] = value;\r\n  }\r\n\r\n  public fill(): void {\r\n    if (this.globalAlpha == 0.0) return;\r\n    this.update_fill_style();\r\n    this.update_filter();\r\n    this.update_global_alpha();\r\n    this.update_global_composite_operation();\r\n    this.update_image_smoothing_enabled();\r\n    this.update_image_smoothing_quality();\r\n    this.update_path();\r\n    this.update_shadow_blur();\r\n    this.update_shadow_color();\r\n    this.update_shadow_offset_x();\r\n    this.update_shadow_offset_y();\r\n    this.update_transform();\r\n    super.write_fill();\r\n  }\r\n\r\n  get fillStyle(): string {\r\n    return this._fillStyle[this._stackIndex];\r\n  }\r\n\r\n  set fillStyle(value: string) {\r\n    this._fillStyle[this._stackIndex] = value;\r\n  }\r\n\r\n  public fillRect(x: f64, y: f64, width: f64, height: f64): void {\r\n    if (width == 0) return;\r\n    if (height == 0) return;\r\n    if (this.globalAlpha == 0.0) return;\r\n    this.update_fill_style();\r\n    this.update_filter();\r\n    this.update_global_alpha();\r\n    this.update_global_composite_operation();\r\n    this.update_image_smoothing_enabled();\r\n    this.update_image_smoothing_quality();\r\n    this.update_shadow_blur();\r\n    this.update_shadow_color();\r\n    this.update_shadow_offset_x();\r\n    this.update_shadow_offset_y();\r\n    this.update_transform();\r\n    super.write_fill_rect(x, y, width, height);\r\n  }\r\n\r\n  public fillText(text: string, x: f64, y: f64, maxWidth: f64 = -1.0): void {\r\n    if (text.length == 0) return;\r\n    if (this.globalAlpha == 0.0) return;\r\n    if (maxWidth == 0.0) return;\r\n    this.update_direction();\r\n    this.update_fill_style();\r\n    this.update_filter();\r\n    this.update_font();\r\n    this.update_global_alpha();\r\n    this.update_global_composite_operation();\r\n    this.update_image_smoothing_enabled();\r\n    this.update_image_smoothing_quality();\r\n    this.update_shadow_blur();\r\n    this.update_shadow_color();\r\n    this.update_shadow_offset_x();\r\n    this.update_shadow_offset_y();\r\n    this.update_text_align();\r\n    this.update_text_baseline();\r\n    this.update_transform();\r\n    super.write_fill_text(text, x, y, maxWidth);\r\n  }\r\n\r\n  get font(): string {\r\n    return this._font[this._stackIndex];\r\n  }\r\n\r\n  set font(value: string) {\r\n    this._font[this._stackIndex] = value;\r\n  }\r\n\r\n  get globalAlpha(): f64 {\r\n    return this._globalAlpha[this._stackIndex];\r\n  }\r\n\r\n  set globalAlpha(value: f64) {\r\n    this._globalAlpha[this._stackIndex] = value;\r\n  }\r\n\r\n  public getLineDash(): Array<f64> {\r\n    var lineDash: f64[] = this._lineDash[this._stackIndex];\r\n    return lineDash.slice(0);\r\n  }\r\n\r\n  public setLineDash(value: Array<f64>): void {\r\n    this._lineDash[this._stackIndex] = ((value.length & 1) == 1) ? value.concat(value) : value.slice(0);\r\n  }\r\n\r\n  get globalCompositeOperation(): GlobalCompositeOperation {\r\n    return this._globalCompositeOperation[this._stackIndex];\r\n  }\r\n  set globalCompositeOperation(value: GlobalCompositeOperation) {\r\n    this._globalCompositeOperation[this._stackIndex] = value;\r\n    super.write_global_composite_operation(value);\r\n  }\r\n\r\n  get imageSmoothingEnabled(): bool {\r\n    return this._imageSmoothingEnabled[this._stackIndex];\r\n  }\r\n\r\n  set imageSmoothingEnabled(value: bool) {\r\n    this._imageSmoothingEnabled[this._stackIndex] = value;\r\n  }\r\n\r\n  get imageSmoothingQuality(): ImageSmoothingQuality {\r\n    return this._imageSmoothingQuality[this._stackIndex];\r\n  }\r\n\r\n  set imageSmoothingQuality(value: ImageSmoothingQuality) {\r\n    this._imageSmoothingQuality[this._stackIndex] = value;\r\n  }\r\n\r\n  get lineCap(): LineCap {\r\n    return this._lineCap[this._stackIndex];\r\n  }\r\n\r\n  set lineCap(value: LineCap) {\r\n    this._lineCap[this._stackIndex] = value;\r\n  }\r\n\r\n  get lineDashOffset(): f64 {\r\n    return this._lineDashOffset[this._stackIndex];\r\n  }\r\n\r\n  set lineDashOffset(value: f64) {\r\n    this._lineDashOffset[this._stackIndex] = value;\r\n  }\r\n\r\n  get lineJoin(): LineJoin {\r\n    return this._lineJoin[this._stackIndex];\r\n  }\r\n\r\n  set lineJoin(value: LineJoin) {\r\n    this._lineJoin[this._stackIndex] = value;\r\n  }\r\n\r\n  public lineTo(x: f64, y: f64): void {\r\n    this.write_path_two(CanvasInstruction.LineTo, true, x, y);\r\n  }\r\n\r\n  get lineWidth(): f64 {\r\n    return this._lineWidth[this._stackIndex];\r\n  }\r\n\r\n  set lineWidth(value: f64) {\r\n    this._lineWidth[this._stackIndex] = value;\r\n  }\r\n\r\n  get miterLimit(): f64 {\r\n    return this._miterLimit[this._stackIndex];\r\n  }\r\n\r\n  set miterLimit(value: f64) {\r\n    this._miterLimit[this._stackIndex] = value;\r\n  }\r\n\r\n  public moveTo(x: f64, y: f64): void {\r\n    this.write_path_two(\r\n      CanvasInstruction.MoveTo,\r\n      true,\r\n      x,\r\n      y,\r\n    );\r\n  }\r\n\r\n  public quadraticCurveTo(cpx: f64, cpy: f64, x: f64, y: f64): void {\r\n    this.write_path_four(\r\n      CanvasInstruction.QuadraticCurveTo,\r\n      true,\r\n      cpx,\r\n      cpy,\r\n      x,\r\n      y,\r\n    );\r\n  }\r\n\r\n  public rect(x: f64, y: f64, width: f64, height: f64): void {\r\n    this.write_path_four(\r\n      CanvasInstruction.Rect,\r\n      true,\r\n      x,\r\n      y,\r\n      width,\r\n      height,\r\n    );\r\n  }\r\n\r\n  public rotate(angle: f64): void {\r\n    var cos: f64 = Math.cos(angle);\r\n    var sin: f64 = Math.sin(angle);\r\n\r\n    var a: f64 = this._transformA[this._stackIndex];\r\n    var b: f64 = this._transformB[this._stackIndex];\r\n    var c: f64 = this._transformC[this._stackIndex];\r\n    var d: f64 = this._transformD[this._stackIndex];\r\n\r\n    this._transformA[this._stackIndex] = a * cos + c * sin;\r\n    this._transformB[this._stackIndex] = b * cos + d * sin;\r\n    this._transformC[this._stackIndex] = a * -sin + c * cos;\r\n    this._transformD[this._stackIndex] = b * -sin + d * cos;\r\n  }\r\n\r\n  public scale(x: f64, y: f64): void {\r\n    this._transformA[this._stackIndex] *= x;\r\n    this._transformB[this._stackIndex] *= x;\r\n    this._transformC[this._stackIndex] *= y;\r\n    this._transformD[this._stackIndex] *= y;\r\n  }\r\n\r\n  public setTransform(a: f64, b: f64, c: f64, d: f64, e: f64, f: f64): void {\r\n    this._transformA[this._stackIndex] = a;\r\n    this._transformB[this._stackIndex] = b;\r\n    this._transformC[this._stackIndex] = c;\r\n    this._transformD[this._stackIndex] = d;\r\n    this._transformE[this._stackIndex] = e;\r\n    this._transformF[this._stackIndex] = f;\r\n  }\r\n\r\n  get shadowBlur(): f64 {\r\n    return this._shadowBlur[this._stackIndex];\r\n  }\r\n\r\n  set shadowBlur(value: f64) {\r\n    this._shadowBlur[this._stackIndex] = value;\r\n  }\r\n\r\n  get shadowColor(): string {\r\n    return this._shadowColor[this._stackIndex];\r\n  }\r\n\r\n  set shadowColor(value: string) {\r\n    this._shadowColor[this._stackIndex] = value;\r\n  }\r\n\r\n  get shadowOffsetX(): f64 {\r\n    return this._shadowOffsetX[this._stackIndex];\r\n  }\r\n\r\n  set shadowOffsetX(value: f64) {\r\n    this._shadowOffsetX[this._stackIndex] = value;\r\n  }\r\n\r\n  get shadowOffsetY(): f64 {\r\n    return this._shadowOffsetY[this._stackIndex];\r\n  }\r\n\r\n  set shadowOffsetY(value: f64) {\r\n    this._shadowOffsetY[this._stackIndex] = value;\r\n  }\r\n\r\n  public stroke(): void {\r\n    if (this.globalAlpha == 0.0) return;\r\n    if (this._pathIndex == 1) return;\r\n    this.update_filter();\r\n    this.update_global_alpha();\r\n    this.update_global_composite_operation();\r\n    this.update_image_smoothing_enabled();\r\n    this.update_image_smoothing_quality();\r\n    this.update_line_cap();\r\n    this.update_line_dash();\r\n    this.update_line_dash_offset();\r\n    this.update_line_join();\r\n    this.update_line_width();\r\n    this.update_miter_limit();\r\n    this.update_path();\r\n    this.update_shadow_blur();\r\n    this.update_shadow_color();\r\n    this.update_shadow_offset_x();\r\n    this.update_shadow_offset_y();\r\n    this.update_stroke_style();\r\n    this.update_transform();\r\n    super.write_stroke();\r\n  }\r\n\r\n  public strokeRect(x: f64, y: f64, width: f64, height: f64): void {\r\n    if (this.globalAlpha == 0.0) return;\r\n    if (width == 0.0) return;\r\n    if (height == 0.0) return;\r\n    this.update_filter();\r\n    this.update_global_alpha();\r\n    this.update_global_composite_operation();\r\n    this.update_image_smoothing_enabled();\r\n    this.update_image_smoothing_quality();\r\n    this.update_line_cap();\r\n    this.update_line_dash();\r\n    this.update_line_dash_offset();\r\n    this.update_line_join();\r\n    this.update_line_width();\r\n    this.update_miter_limit();\r\n    this.update_shadow_blur();\r\n    this.update_shadow_color();\r\n    this.update_shadow_offset_x();\r\n    this.update_shadow_offset_y();\r\n    this.update_stroke_style();\r\n    this.update_transform();\r\n    super.write_stroke_rect(x, y, width, height);\r\n  }\r\n\r\n  get strokeStyle(): string {\r\n    return this._strokeStyle[this._stackIndex];\r\n  }\r\n\r\n  set strokeStyle(value: string) {\r\n    this._strokeStyle[this._stackIndex] = value;\r\n  }\r\n\r\n  public strokeText(text: string, x: f64, y: f64, maxWidth: f64 = -1.0): void {\r\n    if (text.length == 0) return;\r\n    if (this._globalAlpha[this._stackIndex] == 0.0) return;\r\n    if (maxWidth == 0.0) return;\r\n    this.update_direction();\r\n    this.update_filter();\r\n    this.update_font();\r\n    this.update_global_alpha();\r\n    this.update_global_composite_operation();\r\n    this.update_image_smoothing_enabled();\r\n    this.update_image_smoothing_quality();\r\n    this.update_line_cap();\r\n    this.update_line_dash();\r\n    this.update_line_dash_offset();\r\n    this.update_line_join();\r\n    this.update_line_width();\r\n    this.update_miter_limit();\r\n    this.update_shadow_blur();\r\n    this.update_shadow_color();\r\n    this.update_shadow_offset_x();\r\n    this.update_shadow_offset_y();\r\n    this.update_stroke_style();\r\n    this.update_text_align();\r\n    this.update_text_baseline();\r\n    this.update_transform();\r\n    super.write_stroke_text(text, x, y, maxWidth);\r\n  }\r\n\r\n  get textAlign(): TextAlign {\r\n    return this._textAlign[this._stackIndex];\r\n  }\r\n\r\n  set textAlign(value: TextAlign) {\r\n    this._textAlign[this._stackIndex] = value;\r\n  }\r\n\r\n  get textBaseline(): TextBaseline {\r\n    return this._textBaseline[this._stackIndex];\r\n  }\r\n\r\n  set textBaseline(value: TextBaseline) {\r\n    this._textBaseline[this._stackIndex] = value;\r\n  }\r\n\r\n  public transform(a: f64, b: f64, c: f64, d: f64, e: f64, f: f64): void {\r\n    var sa: f64 = this._transformA[this._stackIndex];\r\n    var sb: f64 = this._transformB[this._stackIndex];\r\n    var sc: f64 = this._transformC[this._stackIndex];\r\n    var sd: f64 = this._transformD[this._stackIndex];\r\n    var se: f64 = this._transformE[this._stackIndex];\r\n    var sf: f64 = this._transformF[this._stackIndex];\r\n    this._transformA[this._stackIndex] = sa * a + sc * b;\r\n    this._transformB[this._stackIndex] = sb * a + sd * b;\r\n    this._transformC[this._stackIndex] = sa * c + sc * d;\r\n    this._transformD[this._stackIndex] = sb * c + sd * d;\r\n    this._transformE[this._stackIndex] = sa * e + sc * f + se;\r\n    this._transformF[this._stackIndex] = sb * e + sd * f + sf;\r\n  }\r\n\r\n  public translate(x: f64, y: f64): void {\r\n    this._transformE[this._stackIndex] += this._transformA[this._stackIndex] * x + this._transformC[this._stackIndex] * y;\r\n    this._transformF[this._stackIndex] += this._transformB[this._stackIndex] * x + this._transformD[this._stackIndex] * y;\r\n  }\r\n\r\n  private update_direction(): void {\r\n    if (this._directionCurrent == this._direction[this._stackIndex]) return;\r\n    this._directionCurrent = this._direction[this._stackIndex];\r\n    super.write_direction(this._directionCurrent);\r\n  }\r\n\r\n  private update_fill_style(): void {\r\n    if (this._fillStyleCurrent == this._fillStyle[this._stackIndex]) return;\r\n    this._fillStyleCurrent = this._fillStyle[this._stackIndex];\r\n    super.write_fill_style(this._fillStyleCurrent);\r\n  }\r\n\r\n  private update_filter(): void {\r\n    if (this._filterCurrent == this._filter[this._stackIndex]) return;\r\n    this._filterCurrent = this._filter[this._stackIndex];\r\n    super.write_filter(this._filterCurrent);\r\n  }\r\n\r\n  private update_font(): void {\r\n    if (this._fontCurrent == this._font[this._stackIndex]) return;\r\n    this._fontCurrent = this._font[this._stackIndex];\r\n    super.write_font(this._fontCurrent);\r\n  }\r\n\r\n  private update_global_alpha(): void {\r\n    if (this._globalAlphaCurrent == this._globalAlpha[this._stackIndex]) return;\r\n    this._globalAlphaCurrent = this._globalAlpha[this._stackIndex];\r\n    super.write_global_alpha(this._globalAlphaCurrent);\r\n  }\r\n\r\n  private update_global_composite_operation(): void {\r\n    if (this._globalCompositeOperationCurrent == this._globalCompositeOperation[this._stackIndex]) return;\r\n    this._globalCompositeOperationCurrent = this._globalCompositeOperation[this._stackIndex];\r\n    super.write_global_composite_operation(this._globalCompositeOperationCurrent);\r\n  }\r\n\r\n  private update_image_smoothing_enabled(): void {\r\n    if (this._imageSmoothingEnabledCurrent == this._imageSmoothingEnabled[this._stackIndex]) return;\r\n    this._imageSmoothingEnabledCurrent = this._imageSmoothingEnabled[this._stackIndex];\r\n    super.write_image_smoothing_enabled(this._imageSmoothingEnabledCurrent);\r\n  }\r\n\r\n  private update_image_smoothing_quality(): void {\r\n    if (this._imageSmoothingQualityCurrent == this._imageSmoothingQuality[this._stackIndex]) return;\r\n    this._imageSmoothingQualityCurrent = this._imageSmoothingQuality[this._stackIndex];\r\n    super.write_image_smoothing_quality(this._imageSmoothingQualityCurrent);\r\n  }\r\n\r\n  private update_line_cap(): void {\r\n    if (this._lineCapCurrent == this._lineCap[this._stackIndex]) return;\r\n    this._lineCapCurrent = this._lineCap[this._stackIndex];\r\n    super.write_line_cap(this._lineCapCurrent);\r\n  }\r\n\r\n  private update_line_join(): void {\r\n    if (this._lineJoinCurrent == this._lineJoin[this._stackIndex]) return;\r\n    this._lineJoinCurrent = this._lineJoin[this._stackIndex];\r\n    super.write_line_join(this._lineJoinCurrent);\r\n  }\r\n\r\n  private update_line_width(): void {\r\n    if (this._lineWidthCurrent == this._lineWidth[this._stackIndex]) return;\r\n    this._lineWidthCurrent = this._lineWidth[this._stackIndex];\r\n    super.write_line_width(this._lineWidthCurrent);\r\n  }\r\n\r\n  private update_miter_limit(): void {\r\n    if (this._miterLimitCurrent == this._miterLimit[this._stackIndex]) return;\r\n    this._miterLimitCurrent = this._miterLimit[this._stackIndex];\r\n    super.write_miter_limit(this._miterLimitCurrent);\r\n  }\r\n\r\n  private update_line_dash_offset(): void {\r\n    if (this._lineDashOffsetCurrent == this._lineDashOffset[this._stackIndex]) return;\r\n    this._lineDashOffsetCurrent = this._lineDashOffset[this._stackIndex];\r\n    super.write_line_dash_offset(this._lineDashOffsetCurrent);\r\n  }\r\n\r\n  @inline\r\n  private update_line_dash(): void {\r\n    var next: f64[] = this._lineDash[this._stackIndex];\r\n    var current: f64[] = this._lineDashCurrent;\r\n    if (next.length != current.length) {\r\n      this._lineDashCurrent = next.slice(0);\r\n      super.write_line_dash(next);\r\n      return;\r\n    }\r\n    var i: i32 = 0;\r\n    var length: i32 = next.length;\r\n    while (i < length) {\r\n      if (next[i] != current[i]) {\r\n        this._lineDashCurrent = next.slice(0);\r\n        super.write_line_dash(next);\r\n        break;\r\n      }\r\n      ++i;\r\n    }\r\n  }\r\n\r\n  private update_shadow_blur(): void {\r\n    if (this._shadowBlurCurrent == this._shadowBlur[this._stackIndex]) return;\r\n    this._shadowBlurCurrent = this._shadowBlur[this._stackIndex];\r\n    super.write_shadow_blur(this._shadowBlurCurrent);\r\n  }\r\n\r\n  private update_shadow_color(): void {\r\n    if (this._shadowColorCurrent == this._shadowColor[this._stackIndex]) return;\r\n    this._shadowColorCurrent = this._shadowColor[this._stackIndex];\r\n    super.write_shadow_color(this._shadowColorCurrent);\r\n  }\r\n\r\n  private update_shadow_offset_x(): void {\r\n    if (this._shadowOffsetXCurrent == this._shadowOffsetX[this._stackIndex]) return;\r\n    this._shadowOffsetXCurrent = this._shadowOffsetX[this._stackIndex];\r\n    super.write_shadow_offset_x(this._shadowOffsetXCurrent);\r\n  }\r\n\r\n  private update_shadow_offset_y(): void {\r\n    if (this._shadowOffsetYCurrent == this._shadowOffsetY[this._stackIndex]) return;\r\n    this._shadowOffsetYCurrent = this._shadowOffsetY[this._stackIndex];\r\n    super.write_shadow_offset_y(this._shadowOffsetYCurrent);\r\n  }\r\n\r\n  private update_stroke_style(): void {\r\n    if (this._strokeStyleCurrent == this._strokeStyle[this._stackIndex]) return;\r\n    this._strokeStyleCurrent = this._strokeStyle[this._stackIndex];\r\n    super.write_stroke_style(this._strokeStyleCurrent);\r\n  }\r\n\r\n  private update_text_align(): void {\r\n    if (this._textAlignCurrent == this._textAlign[this._stackIndex]) return;\r\n    this._textAlignCurrent = this._textAlign[this._stackIndex];\r\n    super.write_text_align(this._textAlignCurrent);\r\n  }\r\n\r\n  private update_text_baseline(): void {\r\n    if (this._textBaselineCurrent == this._textBaseline[this._stackIndex]) return;\r\n    this._textBaselineCurrent = this._textBaseline[this._stackIndex];\r\n    super.write_text_baseline(this._textBaselineCurrent);\r\n  }\r\n\r\n  private update_transform(): void {\r\n    if (\r\n      this._transformA[this._stackIndex] == this._transformACurrent\r\n      && this._transformB[this._stackIndex] == this._transformBCurrent\r\n      && this._transformC[this._stackIndex] == this._transformCCurrent\r\n      && this._transformD[this._stackIndex] == this._transformDCurrent\r\n      && this._transformE[this._stackIndex] == this._transformECurrent\r\n      && this._transformF[this._stackIndex] == this._transformFCurrent\r\n    ) return;\r\n    this._transformACurrent = this._transformA[this._stackIndex];\r\n    this._transformBCurrent = this._transformB[this._stackIndex];\r\n    this._transformCCurrent = this._transformC[this._stackIndex];\r\n    this._transformDCurrent = this._transformD[this._stackIndex];\r\n    this._transformECurrent = this._transformE[this._stackIndex];\r\n    this._transformFCurrent = this._transformF[this._stackIndex];\r\n    super.write_set_transform(\r\n      this._transformACurrent,\r\n      this._transformBCurrent,\r\n      this._transformCCurrent,\r\n      this._transformDCurrent,\r\n      this._transformECurrent,\r\n      this._transformFCurrent,\r\n    );\r\n  }\r\n\r\n  @inline\r\n  private update_path(): void {\r\n    var i: i32 = 0;\r\n    var pathItem: Path2DElement;\r\n    while (i < this._pathIndex) {\r\n      pathItem = this._path[i];\r\n      if (pathItem.updateTransform) {\r\n        this._transformA[this._stackIndex] = pathItem.transformA;\r\n        this._transformB[this._stackIndex] = pathItem.transformB;\r\n        this._transformC[this._stackIndex] = pathItem.transformC;\r\n        this._transformD[this._stackIndex] = pathItem.transformD;\r\n        this._transformE[this._stackIndex] = pathItem.transformE;\r\n        this._transformF[this._stackIndex] = pathItem.transformF;\r\n        this.update_transform();\r\n      }\r\n      switch (pathItem.count) {\r\n        case 0: {\r\n          super.write_zero(pathItem.instruction);\r\n          break;\r\n        }\r\n        case 1: {\r\n          super.write_one(pathItem.instruction, pathItem.a);\r\n          break;\r\n        }\r\n        case 2: {\r\n          super.write_two(pathItem.instruction, pathItem.a, pathItem.b);\r\n          break;\r\n        }\r\n        case 4: {\r\n          super.write_four(pathItem.instruction, pathItem.a, pathItem.b, pathItem.c, pathItem.d);\r\n          break;\r\n        }\r\n        case 5: {\r\n          super.write_five(pathItem.instruction, pathItem.a, pathItem.b, pathItem.c, pathItem.d, pathItem.e);\r\n          break;\r\n        }\r\n        case 6: {\r\n          super.write_six(pathItem.instruction, pathItem.a, pathItem.b, pathItem.c, pathItem.d, pathItem.e, pathItem.f);\r\n          break;\r\n        }\r\n        case 8: {\r\n          super.write_eight(pathItem.instruction, pathItem.a, pathItem.b, pathItem.c, pathItem.d, pathItem.e, pathItem.f, pathItem.g, pathItem.h);\r\n          break;\r\n        }\r\n      }\r\n      ++i;\r\n    }\r\n    this._pathIndex = 1;\r\n  }\r\n\r\n  @inline\r\n  private write_path_zero(instruction: CanvasInstruction, updateTransform: bool): void {\r\n    var pathItem: Path2DElement = this._path[this._pathIndex++];\r\n    pathItem.instruction = instruction\r\n    pathItem.count = 0;\r\n    if (updateTransform) {\r\n      pathItem.transformA = this._transformA[this._stackIndex];\r\n      pathItem.transformB = this._transformB[this._stackIndex];\r\n      pathItem.transformC = this._transformC[this._stackIndex];\r\n      pathItem.transformD = this._transformD[this._stackIndex];\r\n      pathItem.transformE = this._transformE[this._stackIndex];\r\n      pathItem.transformF = this._transformF[this._stackIndex];\r\n      pathItem.updateTransform = true;\r\n    }\r\n  }\r\n\r\n  @inline\r\n  private write_path_two(instruction: CanvasInstruction, updateTransform: bool, a: f64, b: f64): void {\r\n    var pathItem: Path2DElement = this._path[this._pathIndex++];\r\n    pathItem.instruction = instruction\r\n    pathItem.count = 2;\r\n    pathItem.a = a;\r\n    pathItem.b = b;\r\n    if (updateTransform) {\r\n      pathItem.transformA = this._transformA[this._stackIndex];\r\n      pathItem.transformB = this._transformB[this._stackIndex];\r\n      pathItem.transformC = this._transformC[this._stackIndex];\r\n      pathItem.transformD = this._transformD[this._stackIndex];\r\n      pathItem.transformE = this._transformE[this._stackIndex];\r\n      pathItem.transformF = this._transformF[this._stackIndex];\r\n      pathItem.updateTransform = true;\r\n    }\r\n  }\r\n\r\n  @inline\r\n  private write_path_four(instruction: CanvasInstruction, updateTransform: bool, a: f64, b: f64, c: f64, d: f64): void {\r\n    var pathItem: Path2DElement = this._path[this._pathIndex++];\r\n    pathItem.instruction = instruction\r\n    pathItem.count = 4;\r\n    pathItem.a = a;\r\n    pathItem.b = b;\r\n    pathItem.c = c;\r\n    pathItem.d = d;\r\n    if (updateTransform) {\r\n      pathItem.transformA = this._transformA[this._stackIndex];\r\n      pathItem.transformB = this._transformB[this._stackIndex];\r\n      pathItem.transformC = this._transformC[this._stackIndex];\r\n      pathItem.transformD = this._transformD[this._stackIndex];\r\n      pathItem.transformE = this._transformE[this._stackIndex];\r\n      pathItem.transformF = this._transformF[this._stackIndex];\r\n      pathItem.updateTransform = true;\r\n    }\r\n  }\r\n\r\n  @inline\r\n  private write_path_five(instruction: CanvasInstruction, updateTransform: bool, a: f64, b: f64, c: f64, d: f64, e: f64): void {\r\n    var pathItem: Path2DElement = this._path[this._pathIndex++];\r\n    pathItem.instruction = instruction\r\n    pathItem.count = 5;\r\n    pathItem.a = a;\r\n    pathItem.b = b;\r\n    pathItem.c = c;\r\n    pathItem.d = d;\r\n    pathItem.e = e;\r\n    if (updateTransform) {\r\n      pathItem.transformA = this._transformA[this._stackIndex];\r\n      pathItem.transformB = this._transformB[this._stackIndex];\r\n      pathItem.transformC = this._transformC[this._stackIndex];\r\n      pathItem.transformD = this._transformD[this._stackIndex];\r\n      pathItem.transformE = this._transformE[this._stackIndex];\r\n      pathItem.transformF = this._transformF[this._stackIndex];\r\n      pathItem.updateTransform = true;\r\n    }\r\n  }\r\n\r\n  @inline\r\n  private write_path_six(instruction: CanvasInstruction, updateTransform: bool, a: f64, b: f64, c: f64, d: f64, e: f64, f: f64): void {\r\n    var pathItem: Path2DElement = this._path[this._pathIndex++];\r\n    pathItem.instruction = instruction\r\n    pathItem.count = 6;\r\n    pathItem.a = a;\r\n    pathItem.b = b;\r\n    pathItem.c = c;\r\n    pathItem.d = d;\r\n    pathItem.e = e;\r\n    pathItem.f = f;\r\n    if (updateTransform) {\r\n      pathItem.transformA = this._transformA[this._stackIndex];\r\n      pathItem.transformB = this._transformB[this._stackIndex];\r\n      pathItem.transformC = this._transformC[this._stackIndex];\r\n      pathItem.transformD = this._transformD[this._stackIndex];\r\n      pathItem.transformE = this._transformE[this._stackIndex];\r\n      pathItem.transformF = this._transformF[this._stackIndex];\r\n      pathItem.updateTransform = true;\r\n    }\r\n  }\r\n\r\n  @inline\r\n  private write_path_eight(instruction: CanvasInstruction, updateTransform: bool, a: f64, b: f64, c: f64, d: f64, e: f64, f: f64, g: f64, h: f64): void {\r\n    var pathItem: Path2DElement = this._path[this._pathIndex++];\r\n    pathItem.instruction = instruction\r\n    pathItem.count = 8;\r\n    pathItem.a = a;\r\n    pathItem.b = b;\r\n    pathItem.c = c;\r\n    pathItem.d = d;\r\n    pathItem.e = e;\r\n    pathItem.f = f;\r\n    pathItem.g = g;\r\n    pathItem.h = h;\r\n    if (updateTransform) {\r\n      pathItem.transformA = this._transformA[this._stackIndex];\r\n      pathItem.transformB = this._transformB[this._stackIndex];\r\n      pathItem.transformC = this._transformC[this._stackIndex];\r\n      pathItem.transformD = this._transformD[this._stackIndex];\r\n      pathItem.transformE = this._transformE[this._stackIndex];\r\n      pathItem.transformF = this._transformF[this._stackIndex];\r\n      pathItem.updateTransform = true;\r\n    }\r\n  }\r\n}","import {\n  MAX_BLENGTH,\n  HEADER_SIZE,\n  allocateUnsafe,\n  reallocateUnsafe,\n  LOAD,\n  STORE\n} from \"./internal/arraybuffer\";\n\nimport {\n  allocateUnsafe as allocateUnsafeString,\n  freeUnsafe as freeUnsafeString,\n  copyUnsafe as copyUnsafeString\n} from \"./internal/string\";\n\nimport {\n  COMPARATOR,\n  SORT\n} from \"./internal/sort\";\n\nimport {\n  itoa,\n  dtoa,\n  itoa_stream,\n  dtoa_stream,\n  MAX_DOUBLE_LENGTH\n} from \"./internal/number\";\n\nimport {\n  isArray as builtin_isArray\n} from \"./builtins\";\n\nexport class Array<T> {\n  [key: number]: T; // compatibility only\n\n  /* @internal */ buffer_: ArrayBuffer;\n  /* @internal */ length_: i32;\n\n  @inline static isArray<U>(value: U): bool {\n    return builtin_isArray(value) && value !== null;\n  }\n\n  constructor(length: i32 = 0) {\n    const MAX_LENGTH = MAX_BLENGTH >>> alignof<T>();\n    if (<u32>length > <u32>MAX_LENGTH) throw new RangeError(\"Invalid array length\");\n    var byteLength = length << alignof<T>();\n    var buffer = allocateUnsafe(byteLength);\n    this.buffer_ = buffer;\n    this.length_ = length;\n    memory.fill(\n      changetype<usize>(buffer) + HEADER_SIZE,\n      0,\n      <usize>byteLength\n    );\n  }\n\n  @inline\n  get length(): i32 {\n    return this.length_;\n  }\n\n  set length(length: i32) {\n    var buffer = this.buffer_;\n    var capacity = buffer.byteLength >>> alignof<T>();\n    if (<u32>length > <u32>capacity) {\n      const MAX_LENGTH = MAX_BLENGTH >>> alignof<T>();\n      if (<u32>length > <u32>MAX_LENGTH) throw new RangeError(\"Invalid array length\");\n      buffer = reallocateUnsafe(buffer, length << alignof<T>());\n      this.buffer_ = buffer;\n    }\n    this.length_ = length;\n  }\n\n  every(callbackfn: (element: T, index: i32, array: Array<T>) => bool): bool {\n    var buffer = this.buffer_;\n    for (let index = 0, toIndex = this.length_; index < min(toIndex, this.length_); ++index) {\n      if (!callbackfn(LOAD<T>(buffer, index), index, this)) return false;\n    }\n    return true;\n  }\n\n  findIndex(predicate: (element: T, index: i32, array: Array<T>) => bool): i32 {\n    var buffer = this.buffer_;\n    for (let index = 0, toIndex = this.length_; index < min(toIndex, this.length_); ++index) {\n      if (predicate(LOAD<T>(buffer, index), index, this)) return index;\n    }\n    return -1;\n  }\n\n  @operator(\"[]\")\n  private __get(index: i32): T {\n    var buffer = this.buffer_;\n    return <u32>index < <u32>(buffer.byteLength >>> alignof<T>())\n      ? LOAD<T>(buffer, index)\n      : <T>unreachable();\n  }\n\n  @operator(\"{}\")\n  private __unchecked_get(index: i32): T {\n    return LOAD<T>(this.buffer_, index);\n  }\n\n  @operator(\"[]=\")\n  private __set(index: i32, value: T): void {\n    var buffer = this.buffer_;\n    var capacity = buffer.byteLength >>> alignof<T>();\n    if (<u32>index >= <u32>capacity) {\n      const MAX_LENGTH = MAX_BLENGTH >>> alignof<T>();\n      if (<u32>index >= <u32>MAX_LENGTH) throw new Error(\"Invalid array length\");\n      buffer = reallocateUnsafe(buffer, (index + 1) << alignof<T>());\n      this.buffer_ = buffer;\n      this.length_ = index + 1;\n    }\n    STORE<T>(buffer, index, value);\n    if (isManaged<T>()) __gc_link(changetype<usize>(this), changetype<usize>(value)); // tslint:disable-line\n  }\n\n  @operator(\"{}=\")\n  private __unchecked_set(index: i32, value: T): void {\n    STORE<T>(this.buffer_, index, value);\n    if (isManaged<T>()) __gc_link(changetype<usize>(this), changetype<usize>(value)); // tslint:disable-line\n  }\n\n  fill(value: T, start: i32 = 0, end: i32 = i32.MAX_VALUE): this {\n    var buffer = this.buffer_;\n    var len    = this.length_;\n\n    start = start < 0 ? max(len + start, 0) : min(start, len);\n    end   = end   < 0 ? max(len + end,   0) : min(end,   len);\n\n    if (sizeof<T>() == 1) {\n      if (start < end) {\n        memory.fill(\n          changetype<usize>(buffer) + start + HEADER_SIZE,\n          <u8>value,\n          <usize>(end - start)\n        );\n      }\n    } else {\n      for (; start < end; ++start) {\n        STORE<T>(buffer, start, value);\n      }\n    }\n    return this;\n  }\n\n  @inline\n  includes(searchElement: T, fromIndex: i32 = 0): bool {\n    return this.indexOf(searchElement, fromIndex) >= 0;\n  }\n\n  indexOf(searchElement: T, fromIndex: i32 = 0): i32 {\n    var length = this.length_;\n    if (length == 0 || fromIndex >= length) return -1;\n    if (fromIndex < 0) fromIndex = max(length + fromIndex, 0);\n    var buffer = this.buffer_;\n    while (fromIndex < length) {\n      if (LOAD<T>(buffer, fromIndex) == searchElement) return fromIndex;\n      ++fromIndex;\n    }\n    return -1;\n  }\n\n  lastIndexOf(searchElement: T, fromIndex: i32 = this.length_): i32 {\n    var length = this.length_;\n    if (length == 0) return -1;\n    if (fromIndex < 0) fromIndex = length + fromIndex; // no need to clamp\n    else if (fromIndex >= length) fromIndex = length - 1;\n    var buffer = this.buffer_;\n    while (fromIndex >= 0) {                           // ^\n      if (LOAD<T>(buffer, fromIndex) == searchElement) return fromIndex;\n      --fromIndex;\n    }\n    return -1;\n  }\n\n  push(element: T): i32 {\n    var length = this.length_;\n    var buffer = this.buffer_;\n    var capacity = buffer.byteLength >>> alignof<T>();\n    var newLength = length + 1; // safe only if length is checked\n    if (<u32>length >= <u32>capacity) {\n      const MAX_LENGTH = MAX_BLENGTH >>> alignof<T>();\n      if (<u32>length >= <u32>MAX_LENGTH) throw new Error(\"Invalid array length\");\n      buffer = reallocateUnsafe(buffer, newLength << alignof<T>());\n      this.buffer_ = buffer;\n    }\n    this.length_ = newLength;\n    STORE<T>(buffer, length, element);\n    if (isManaged<T>()) __gc_link(changetype<usize>(this), changetype<usize>(element)); // tslint:disable-line\n    return newLength;\n  }\n\n  concat(items: Array<T>): Array<T> {\n    var thisLen = this.length_;\n    var otherLen = items === null ? 0 : items.length_;\n    var outLen = thisLen + otherLen;\n    var out = new Array<T>(outLen);\n\n    if (thisLen) {\n      memory.copy(\n        changetype<usize>(out.buffer_)  + HEADER_SIZE,\n        changetype<usize>(this.buffer_) + HEADER_SIZE,\n        <usize>thisLen << alignof<T>()\n      );\n    }\n    if (otherLen) {\n      memory.copy(\n        changetype<usize>(out.buffer_)   + HEADER_SIZE + (<usize>thisLen << alignof<T>()),\n        changetype<usize>(items.buffer_) + HEADER_SIZE,\n        <usize>otherLen << alignof<T>()\n      );\n    }\n    return out;\n  }\n\n  copyWithin(target: i32, start: i32, end: i32 = i32.MAX_VALUE): this {\n    var buffer = this.buffer_;\n    var len = this.length_;\n\n        end   = min<i32>(end, len);\n    var to    = target < 0 ? max(len + target, 0) : min(target, len);\n    var from  = start < 0 ? max(len + start, 0) : min(start, len);\n    var last  = end < 0 ? max(len + end, 0) : min(end, len);\n    var count = min(last - from, len - to);\n\n    if (from < to && to < (from + count)) {\n      from += count - 1;\n      to   += count - 1;\n      while (count) {\n        STORE<T>(buffer, to, LOAD<T>(buffer, from));\n        --from, --to, --count;\n      }\n    } else {\n      memory.copy(\n        changetype<usize>(buffer) + HEADER_SIZE + (<usize>to << alignof<T>()),\n        changetype<usize>(buffer) + HEADER_SIZE + (<usize>from << alignof<T>()),\n        <usize>count << alignof<T>()\n      );\n    }\n    return this;\n  }\n\n  pop(): T {\n    var length = this.length_;\n    if (length < 1) throw new RangeError(\"Array is empty\");\n    var element = LOAD<T>(this.buffer_, --length);\n    this.length_ = length;\n    return element;\n  }\n\n  forEach(callbackfn: (value: T, index: i32, array: Array<T>) => void): void {\n    var buffer = this.buffer_;\n    for (let index = 0, toIndex = this.length_; index < toIndex && index < this.length_; ++index) {\n      callbackfn(LOAD<T>(buffer, index), index, this);\n    }\n  }\n\n  map<U>(callbackfn: (value: T, index: i32, array: Array<T>) => U): Array<U> {\n    var buffer = this.buffer_;\n    var length = this.length_;\n    var result = new Array<U>(length);\n    var resultBuffer = result.buffer_;\n    for (let index = 0; index < min(length, this.length_); ++index) {\n      STORE<U>(resultBuffer, index, callbackfn(LOAD<T>(buffer, index), index, this));\n    }\n    return result;\n  }\n\n  filter(callbackfn: (value: T, index: i32, array: Array<T>) => bool): Array<T> {\n    var buffer = this.buffer_;\n    var result = new Array<T>();\n    for (let index = 0, toIndex = this.length_; index < min(toIndex, this.length_); ++index) {\n      let value = LOAD<T>(buffer, index);\n      if (callbackfn(value, index, this)) result.push(value);\n    }\n    return result;\n  }\n\n  reduce<U>(\n    callbackfn: (previousValue: U, currentValue: T, currentIndex: i32, array: Array<T>) => U,\n    initialValue: U\n  ): U {\n    var accum = initialValue;\n    var buffer = this.buffer_;\n    for (let index = 0, toIndex = this.length_; index < min(toIndex, this.length_); ++index) {\n      accum = callbackfn(accum, LOAD<T>(buffer, index), index, this);\n    }\n    return accum;\n  }\n\n  reduceRight<U>(\n    callbackfn: (previousValue: U, currentValue: T, currentIndex: i32, array: Array<T>) => U,\n    initialValue: U\n  ): U {\n    var accum = initialValue;\n    var buffer = this.buffer_;\n    for (let index: i32 = this.length_ - 1; index >= 0; --index) {\n      accum = callbackfn(accum, LOAD<T>(buffer, index), index, this);\n    }\n    return accum;\n  }\n\n  shift(): T {\n    var length = this.length_;\n    if (length < 1) throw new RangeError(\"Array is empty\");\n    var buffer = this.buffer_;\n    var element = LOAD<T>(buffer, 0);\n    var lastIndex = length - 1;\n    memory.copy(\n      changetype<usize>(buffer) + HEADER_SIZE,\n      changetype<usize>(buffer) + HEADER_SIZE + sizeof<T>(),\n      <usize>lastIndex << alignof<T>()\n    );\n    STORE<T>(buffer, lastIndex, <T>null);\n    this.length_ = lastIndex;\n    return element;\n  }\n\n  some(callbackfn: (element: T, index: i32, array: Array<T>) => bool): bool {\n    var buffer = this.buffer_;\n    for (let index = 0, toIndex = this.length_; index < min(toIndex, this.length_); ++index) {\n      if (callbackfn(LOAD<T>(buffer, index), index, this)) return true;\n    }\n    return false;\n  }\n\n  unshift(element: T): i32 {\n    var buffer = this.buffer_;\n    var capacity = buffer.byteLength >>> alignof<T>();\n    var length = this.length_;\n    var newLength = length + 1; // safe only if length is checked\n    if (<u32>length >= <u32>capacity) {\n      const MAX_LENGTH = MAX_BLENGTH >>> alignof<T>();\n      if (<u32>length >= <u32>MAX_LENGTH) throw new Error(\"Invalid array length\");\n      buffer = reallocateUnsafe(buffer, newLength << alignof<T>());\n      capacity = buffer.byteLength >>> alignof<T>();\n      this.buffer_ = buffer;\n    }\n    memory.copy(\n      changetype<usize>(buffer) + HEADER_SIZE + sizeof<T>(),\n      changetype<usize>(buffer) + HEADER_SIZE,\n      <usize>(capacity - 1) << alignof<T>()\n    );\n    STORE<T>(buffer, 0, element);\n    this.length_ = newLength;\n    if (isManaged<T>()) __gc_link(changetype<usize>(this), changetype<usize>(element)); // tslint:disable-line\n    return newLength;\n  }\n\n  slice(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Array<T> {\n    var length = this.length_;\n    if (begin < 0) begin = max(length + begin, 0);\n    else if (begin > length) begin = length;\n    if (end < 0) end = length + end; // no need to clamp\n    else if (end > length) end = length;\n    if (end < begin) end = begin;    // ^\n    var newLength = end - begin;\n    assert(newLength >= 0);\n    var sliced = new Array<T>(newLength);\n    if (newLength) {\n      memory.copy(\n        changetype<usize>(sliced.buffer_) + HEADER_SIZE,\n        changetype<usize>(this.buffer_) + HEADER_SIZE + (<usize>begin << alignof<T>()),\n        <usize>newLength << alignof<T>()\n      );\n    }\n    return sliced;\n  }\n\n  splice(start: i32, deleteCount: i32 = i32.MAX_VALUE): Array<T> {\n    var length  = this.length_;\n    start       = start < 0 ? max<i32>(length + start, 0) : min<i32>(start, length);\n    deleteCount = max<i32>(min<i32>(deleteCount, length - start), 0);\n    var buffer  = this.buffer_;\n    var spliced = new Array<T>(deleteCount);\n    var source  = changetype<usize>(buffer) + HEADER_SIZE + (<usize>start << alignof<T>());\n    memory.copy(\n      changetype<usize>(spliced.buffer_) + HEADER_SIZE,\n      source,\n      <usize>deleteCount << alignof<T>()\n    );\n    var offset = start + deleteCount;\n    if (length != offset) {\n      memory.copy(\n        source,\n        changetype<usize>(buffer) + HEADER_SIZE + (<usize>offset << alignof<T>()),\n        <usize>(length - offset) << alignof<T>()\n      );\n    }\n    this.length_ = length - deleteCount;\n    return spliced;\n  }\n\n  reverse(): Array<T> {\n    var buffer = this.buffer_;\n    for (let front = 0, back = this.length_ - 1; front < back; ++front, --back) {\n      let temp = LOAD<T>(buffer, front);\n      STORE<T>(buffer, front, LOAD<T>(buffer, back));\n      STORE<T>(buffer, back, temp);\n    }\n    return this;\n  }\n\n  sort(comparator: (a: T, b: T) => i32 = COMPARATOR<T>()): this {\n    // TODO remove this when flow will allow trackcing null\n    assert(comparator); // The comparison function must be a function\n\n    var length = this.length_;\n    if (length <= 1) return this;\n    var buffer = this.buffer_;\n    if (length == 2) {\n      let a = LOAD<T>(buffer, 1); // a = arr[1]\n      let b = LOAD<T>(buffer, 0); // b = arr[0]\n      if (comparator(a, b) < 0) {\n        STORE<T>(buffer, 1, b);   // arr[1] = b;\n        STORE<T>(buffer, 0, a);   // arr[0] = a;\n      }\n      return this;\n    }\n    SORT<T>(buffer, 0, length, comparator);\n    return this;\n  }\n\n  join(separator: string = \",\"): string {\n    var lastIndex = this.length_ - 1;\n    if (lastIndex < 0) return \"\";\n    var result = \"\";\n    var value: T;\n    var buffer = this.buffer_;\n    var sepLen = separator.length;\n    var hasSeparator = sepLen != 0;\n    if (value instanceof bool) {\n      if (!lastIndex) {\n        return select<string>(\"true\", \"false\", LOAD<T,bool>(buffer, 0));\n      }\n      let valueLen = 5; // max possible length of element len(\"false\")\n      let estLen = (valueLen + sepLen) * lastIndex + valueLen;\n      let result = allocateUnsafeString(estLen);\n      let offset = 0;\n      for (let i = 0; i < lastIndex; ++i) {\n        value = LOAD<T,bool>(buffer, i);\n        valueLen = 4 + <i32>(!value);\n        copyUnsafeString(result, offset, select<string>(\"true\", \"false\", value), 0, valueLen);\n        offset += valueLen;\n        if (hasSeparator) {\n          copyUnsafeString(result, offset, changetype<String>(separator), 0, sepLen);\n          offset += sepLen;\n        }\n      }\n      value = LOAD<T,bool>(buffer, lastIndex);\n      valueLen = 4 + <i32>(!value);\n      copyUnsafeString(result, offset, select<string>(\"true\", \"false\", value), 0, valueLen);\n      offset += valueLen;\n\n      let out = result;\n      if (estLen > offset) {\n        out = result.substring(0, offset);\n        freeUnsafeString(result);\n      }\n      return out;\n    } else if (isInteger<T>()) {\n      if (!lastIndex) {\n        return changetype<string>(itoa<T>(LOAD<T>(buffer, 0)));\n      }\n      const valueLen = (sizeof<T>() <= 4 ? 10 : 20) + <i32>isSigned<T>();\n      let estLen = (valueLen + sepLen) * lastIndex + valueLen;\n      let result = allocateUnsafeString(estLen);\n      let offset = 0;\n      for (let i = 0; i < lastIndex; ++i) {\n        value = LOAD<T>(buffer, i);\n        offset += itoa_stream<T>(changetype<usize>(result), offset, value);\n        if (hasSeparator) {\n          copyUnsafeString(result, offset, separator, 0, sepLen);\n          offset += sepLen;\n        }\n      }\n      value = LOAD<T>(buffer, lastIndex);\n      offset += itoa_stream<T>(changetype<usize>(result), offset, value);\n      let out = result;\n      if (estLen > offset) {\n        out = result.substring(0, offset);\n        freeUnsafeString(result);\n      }\n      return out;\n    } else if (isFloat<T>()) {\n      if (!lastIndex) {\n        return changetype<string>(dtoa(LOAD<T,f64>(buffer, 0)));\n      }\n      const valueLen = MAX_DOUBLE_LENGTH;\n      let estLen = (valueLen + sepLen) * lastIndex + valueLen;\n      let result = allocateUnsafeString(estLen);\n      let offset = 0;\n      for (let i = 0; i < lastIndex; ++i) {\n        value = LOAD<T,f64>(buffer, i);\n        offset += dtoa_stream(changetype<usize>(result), offset, value);\n        if (hasSeparator) {\n          copyUnsafeString(result, offset, separator, 0, sepLen);\n          offset += sepLen;\n        }\n      }\n      value = LOAD<T,f64>(buffer, lastIndex);\n      offset += dtoa_stream(changetype<usize>(result), offset, value);\n      let out = result;\n      if (estLen > offset) {\n        out = result.substring(0, offset);\n        freeUnsafeString(result);\n      }\n      return out;\n    } else if (isString<T>()) {\n      if (!lastIndex) {\n        return LOAD<string>(buffer, 0);\n      }\n      let estLen = 0;\n      for (let i = 0, len = lastIndex + 1; i < len; ++i) {\n        estLen += LOAD<string>(buffer, i).length;\n      }\n      let offset = 0;\n      let result = allocateUnsafeString(estLen + sepLen * lastIndex);\n      for (let i = 0; i < lastIndex; ++i) {\n        value = LOAD<string>(buffer, i);\n        if (value) {\n          let valueLen = value.length;                          // tslint:disable-line:no-unsafe-any\n          copyUnsafeString(result, offset, value, 0, valueLen); // tslint:disable-line:no-unsafe-any\n          offset += valueLen;                                   // tslint:disable-line:no-unsafe-any\n        }\n        if (hasSeparator) {\n          copyUnsafeString(result, offset, separator, 0, sepLen);\n          offset += sepLen;\n        }\n      }\n      value = LOAD<string>(buffer, lastIndex);\n      if (value) {\n        let valueLen = value.length;                          // tslint:disable-line:no-unsafe-any\n        copyUnsafeString(result, offset, value, 0, valueLen); // tslint:disable-line:no-unsafe-any\n      }\n      return result;\n    } else if (isArray<T>()) {\n      if (!lastIndex) {\n        value = LOAD<T>(buffer, 0);\n        return value ? value.join(separator) : \"\"; // tslint:disable-line:no-unsafe-any\n      }\n      for (let i = 0; i < lastIndex; ++i) {\n        value = LOAD<T>(buffer, i);\n        if (value) result += value.join(separator); // tslint:disable-line:no-unsafe-any\n        if (hasSeparator) result += separator;\n      }\n      value = LOAD<T>(buffer, lastIndex);\n      if (value) result += value.join(separator); // tslint:disable-line:no-unsafe-any\n      return result;\n    } else if (isReference<T>()) { // References\n      if (!lastIndex) return \"[object Object]\";\n      const valueLen = 15; // max possible length of element len(\"[object Object]\")\n      let estLen = (valueLen + sepLen) * lastIndex + valueLen;\n      let result = allocateUnsafeString(estLen);\n      let offset = 0;\n      for (let i = 0; i < lastIndex; ++i) {\n        value = LOAD<T>(buffer, i);\n        if (value) {\n          copyUnsafeString(result, offset, changetype<String>(\"[object Object]\"), 0, valueLen);\n          offset += valueLen;\n        }\n        if (hasSeparator) {\n          copyUnsafeString(result, offset, changetype<String>(separator), 0, sepLen);\n          offset += sepLen;\n        }\n      }\n      if (LOAD<T>(buffer, lastIndex)) {\n        copyUnsafeString(result, offset, changetype<String>(\"[object Object]\"), 0, valueLen);\n        offset += valueLen;\n      }\n      let out = result;\n      if (estLen > offset) {\n        out = result.substring(0, offset);\n        freeUnsafeString(result);\n      }\n      return out;\n    } else {\n      assert(false); // Unsupported generic typename\n    }\n  }\n\n  @inline\n  toString(): string {\n    return this.join();\n  }\n\n  private __gc(): void {\n    var buffer = this.buffer_;\n    __gc_mark(changetype<usize>(buffer)); // tslint:disable-line\n    if (isManaged<T>()) {\n      let offset: usize = 0;\n      let end = <usize>this.length_ << alignof<usize>();\n      while (offset < end) {\n        __gc_mark(load<usize>(changetype<usize>(buffer) + offset, HEADER_SIZE)); // tslint:disable-line\n        offset += sizeof<usize>();\n      }\n    }\n  }\n}\n","import \"allocator/tlsf\";\r\n\r\nimport { CanvasRenderingContext2D, OptimizedCanvasRenderingContext2D } from \"./renderer\";\r\nimport { ImageBitmap, createImageBitmap } from \"./primitives\";\r\n\r\nvar ctx: OptimizedCanvasRenderingContext2D;\r\nvar img: ImageBitmap;\r\nexport function init(): void {\r\n  ctx = new OptimizedCanvasRenderingContext2D();\r\n  ctx.init();\r\n  img = createImageBitmap(\"https://placekitten.com/400/300\");\r\n}\r\n\r\nvar frame: i32 = 0;\r\nexport function draw(): Float64Array {\r\n  ++frame;\r\n  if (frame >= 360) frame -= 360;\r\n  ctx.clearRect(0.0, 0.0, 800.0, 600.0);\r\n  ctx.save();\r\n\r\n  if (img._loaded) {\r\n    ctx.translate(200.0, 200.0);\r\n    ctx.rotate(Math.PI / 180.0 * frame * 2);\r\n    ctx.translate(-200.0, -200.0);\r\n    ctx.drawImagePosition(img, 0.0, 0.0);\r\n  }\r\n\r\n  ctx.restore();\r\n  return ctx.commit();\r\n}\r\n","export enum Direction {\r\n  ltr = 0,\r\n  rtl = 1,\r\n  inherit = 2,\r\n}\r\n","export enum GlobalCompositeOperation {\r\n  source_over = 0,\r\n  source_in = 1,\r\n  source_out = 2,\r\n  source_atop = 3,\r\n  destination_over = 4,\r\n  destination_in = 5,\r\n  destination_out = 6,\r\n  destination_atop = 7,\r\n  lighter = 8,\r\n  copy = 9,\r\n  xor = 10,\r\n  multiply = 11,\r\n  screen = 12,\r\n  overlay = 13,\r\n  darken = 14,\r\n  lighten = 15,\r\n  color_dodge = 16,\r\n  color_burn = 17,\r\n  hard_light = 18,\r\n  soft_light = 19,\r\n  difference = 20,\r\n  exclusion = 21,\r\n  hue = 22,\r\n  saturation = 23,\r\n  color = 24,\r\n  luminosity = 25,\r\n}\r\n","export enum ImageSmoothingQuality {\r\n  low = 0,\r\n  medium = 1,\r\n  high = 2,\r\n}\r\n","export enum LineCap {\r\n  butt = 0,\r\n  round = 1,\r\n  square = 2,\r\n}\r\n","export enum LineJoin {\r\n  bevel = 0,\r\n  round = 1,\r\n  miter = 2,\r\n}\r\n","export enum TextAlign {\r\n  left = 0,\r\n  right = 1,\r\n  center = 2,\r\n  start = 3,\r\n  end = 4,\r\n}\r\n","export enum TextBaseline {\r\n  top = 0,\r\n  hanging = 1,\r\n  middle = 2,\r\n  alphabetic = 3,\r\n  ideographic = 4,\r\n  bottom = 5,\r\n}\r\n","import { CanvasInstruction } from \"../shared\";\r\nimport { Matrix } from \"./Matrix\";\r\n\r\nexport class Path2DElement {\r\n  instruction: CanvasInstruction = CanvasInstruction.Commit;\r\n  transformA: f64 = 1.0;\r\n  transformB: f64 = 0.0;\r\n  transformC: f64 = 0.0;\r\n  transformD: f64 = 1.0;\r\n  transformE: f64 = 0.0;\r\n  transformF: f64 = 0.0;\r\n  count: i32 = 0;\r\n  updateTransform: bool = false;\r\n  a: f64 = 0;\r\n  b: f64 = 0;\r\n  c: f64 = 0;\r\n  d: f64 = 0;\r\n  e: f64 = 0;\r\n  f: f64 = 0;\r\n  g: f64 = 0;\r\n  h: f64 = 0;\r\n}\r\n","/* tslint:disable */\n\n@builtin @inline export const NaN: f64 = 0 / 0;\n@builtin @inline export const Infinity: f64 = 1 / 0;\n\n@builtin export declare function isInteger<T>(value?: T): bool;\n@builtin export declare function isFloat<T>(value?: T): bool;\n@builtin export declare function isSigned<T>(value?: T): bool;\n@builtin export declare function isReference<T>(value?: T): bool;\n@builtin export declare function isString<T>(value?: T): bool;\n@builtin export declare function isArray<T>(value?: T): bool;\n@builtin export declare function isDefined(expression: void): bool;\n@builtin export declare function isConstant(expression: void): bool;\n@builtin export declare function isManaged<T>(value?: T): bool;\n@inline export function isNaN<T>(value: T): bool { return value != value; }\n@inline export function isFinite<T>(value: T): bool { return value - value == 0; }\n\n@builtin export declare function clz<T>(value: T): T;\n@builtin export declare function ctz<T>(value: T): T;\n@builtin export declare function popcnt<T>(value: T): T;\n@builtin export declare function rotl<T>(value: T, shift: T): T;\n@builtin export declare function rotr<T>(value: T, shift: T): T;\n@builtin export declare function abs<T>(value: T): T;\n@builtin export declare function max<T>(left: T, right: T): T;\n@builtin export declare function min<T>(left: T, right: T): T;\n@builtin export declare function ceil<T>(value: T): T;\n@builtin export declare function floor<T>(value: T): T;\n@builtin export declare function copysign<T>(left: T, right: T): T;\n@builtin export declare function nearest<T>(value: T): T;\n@builtin export declare function reinterpret<T>(value: void): T;\n@builtin export declare function sqrt<T>(value: T): T;\n@builtin export declare function trunc<T>(value: T): T;\n@builtin export declare function load<T>(offset: usize, constantOffset?: usize): T;\n@builtin export declare function store<T>(offset: usize, value: void, constantOffset?: usize): void;\n@builtin export declare function sizeof<T>(): usize; // | u32 / u64\n@builtin export declare function alignof<T>(): usize; // | u32 / u64\n@builtin export declare function offsetof<T>(fieldName?: string): usize; // | u32 / u64\n@builtin export declare function select<T>(ifTrue: T, ifFalse: T, condition: bool): T;\n@builtin export declare function unreachable(): void;\n@builtin export declare function changetype<T>(value: void): T;\n@builtin export declare function assert<T>(isTrueish: T, message?: string): T;\n@builtin export declare function unchecked<T>(expr: T): T;\n@builtin export declare function call_indirect<T>(target: void, ...args: void[]): T;\n@builtin export declare function instantiate<T>(...args: void[]): T;\n\n@builtin export declare function i8(value: void): i8;\nexport namespace i8 {\n  export const MIN_VALUE: i8 = -128;\n  export const MAX_VALUE: i8 =  127;\n  @inline export function parseInt(value: string, radix: i32 = 0): i8 { return <i8>parseI32(value, radix) }\n  @inline export function parseFloat(value: string): i8 { return <i8>parseFloat(value) }\n}\n\n@builtin export declare function i16(value: void): i16;\nexport namespace i16 {\n  export const MIN_VALUE: i16 = -32768;\n  export const MAX_VALUE: i16 =  32767;\n  @inline export function parseInt(value: string, radix: i32 = 0): i16 { return <i16>parseI32(value, radix) }\n  @inline export function parseFloat(value: string): i16 { return <i16>parseFloat(value) }\n}\n\n@builtin export declare function i32(value: void): i32;\nexport namespace i32 {\n  export const MIN_VALUE: i32 = -2147483648;\n  export const MAX_VALUE: i32 =  2147483647;\n  @builtin export declare function clz(value: i32): i32;\n  @builtin export declare function ctz(value: i32): i32;\n  @builtin export declare function popcnt(value: i32): i32;\n  @builtin export declare function rotl(value: i32, shift: i32): i32;\n  @builtin export declare function rotr(value: i32, shift: i32): i32;\n  @builtin export declare function reinterpret_f32(value: f32): i32;\n  @builtin export declare function load8_s(offset: usize, constantOffset?: usize): i32;\n  @builtin export declare function load8_u(offset: usize, constantOffset?: usize): i32;\n  @builtin export declare function load16_s(offset: usize, constantOffset?: usize): i32;\n  @builtin export declare function load16_u(offset: usize, constantOffset?: usize): i32;\n  @builtin export declare function load(offset: usize, constantOffset?: usize): i32;\n  @builtin export declare function store8(offset: usize, value: i32, constantOffset?: usize): void;\n  @builtin export declare function store16(offset: usize, value: i32, constantOffset?: usize): void;\n  @builtin export declare function store(offset: usize, value: i32, constantOffset?: usize): void;\n  @inline export function parseInt(value: string, radix: i32 = 0): i32 { return <i32>parseI32(value, radix) }\n  @inline export function parseFloat(value: string): i32 { return <i32>parseFloat(value) }\n}\n\n@builtin export declare function i64(value: void): i64;\nexport namespace i64 {\n  export const MIN_VALUE: i64 = -9223372036854775808;\n  export const MAX_VALUE: i64 =  9223372036854775807;\n  @builtin export declare function clz(value: i64): i64;\n  @builtin export declare function ctz(value: i64): i64;\n  @builtin export declare function load8_s(offset: usize, constantOffset?: usize): i64;\n  @builtin export declare function load8_u(offset: usize, constantOffset?: usize): u64;\n  @builtin export declare function load16_s(offset: usize, constantOffset?: usize): i64;\n  @builtin export declare function load16_u(offset: usize, constantOffset?: usize): u64;\n  @builtin export declare function load32_s(offset: usize, constantOffset?: usize): i64;\n  @builtin export declare function load32_u(offset: usize, constantOffset?: usize): u64;\n  @builtin export declare function load(offset: usize, constantOffset?: usize): i64;\n  @builtin export declare function popcnt(value: i64): i64;\n  @builtin export declare function rotl(value: i64, shift: i64): i64;\n  @builtin export declare function rotr(value: i64, shift: i64): i64;\n  @builtin export declare function reinterpret_f64(value: f64): i64;\n  @builtin export declare function store8(offset: usize, value: i64, constantOffset?: usize): void;\n  @builtin export declare function store16(offset: usize, value: i64, constantOffset?: usize): void;\n  @builtin export declare function store32(offset: usize, value: i64, constantOffset?: usize): void;\n  @builtin export declare function store(offset: usize, value: i64, constantOffset?: usize): void;\n  @inline export function parseInt(value: string, radix: i32 = 0): i64 { return <i64>parseI64(value, radix) }\n  @inline export function parseFloat(value: string): i64 { return <i64>parseFloat(value) }\n}\n\n@builtin export declare function isize(value: void): isize;\nexport namespace isize {\n  export const MIN_VALUE: isize = sizeof<i32>() == sizeof<isize>()\n    ? -2147483648\n    : <isize>-9223372036854775808;\n  export const MAX_VALUE: isize = sizeof<i32>() == sizeof<isize>()\n    ? 2147483647\n    : <isize>9223372036854775807;\n  @inline export function parseInt(value: string, radix: i32 = 0): isize { return <isize>parseI64(value, radix) }\n  @inline export function parseFloat(value: string): isize { return <isize>parseFloat(value) }\n}\n\n@builtin export declare function u8(value: void): u8;\nexport namespace u8 {\n  export const MIN_VALUE: u8 = 0;\n  export const MAX_VALUE: u8 = 255;\n  @inline export function parseInt(value: string, radix: i32 = 0): u8 { return <u8>parseI32(value, radix) }\n  @inline export function parseFloat(value: string): u8 { return <u8>parseFloat(value) }\n}\n\n@builtin export declare function u16(value: void): u16;\nexport namespace u16 {\n  export const MIN_VALUE: u16 = 0;\n  export const MAX_VALUE: u16 = 65535;\n  @inline export function parseInt(value: string, radix: i32 = 0): u16 { return <u16>parseI32(value, radix) }\n  @inline export function parseFloat(value: string): u16 { return <u16>parseFloat(value) }\n}\n\n@builtin export declare function u32(value: void): u32;\nexport namespace u32 {\n  export const MIN_VALUE: u32 = 0;\n  export const MAX_VALUE: u32 = 4294967295;\n  @inline export function parseInt(value: string, radix: i32 = 0): u32 { return <u32>parseI32(value, radix) }\n  @inline export function parseFloat(value: string): u32 { return <u32>parseFloat(value) }\n}\n\n@builtin export declare function u64(value: void): u64;\nexport namespace u64 {\n  export const MIN_VALUE: u64 = 0;\n  export const MAX_VALUE: u64 = 18446744073709551615;\n  @inline export function parseInt(value: string, radix: i32 = 0): u64 { return <u64>parseI64(value, radix) }\n  @inline export function parseFloat(value: string): u64 { return <u64>parseFloat(value) }\n}\n\n@builtin export declare function usize(value: void): usize;\nexport namespace usize {\n  export const MIN_VALUE: usize = 0;\n  export const MAX_VALUE: usize = sizeof<u32>() == sizeof<usize>()\n    ? 4294967295\n    : <usize>18446744073709551615;\n  @inline export function parseInt(value: string, radix: i32 = 0): usize { return <usize>parseI64(value, radix) }\n  @inline export function parseFloat(value: string): usize { return <usize>parseFloat(value) }\n}\n\n@builtin export declare function bool(value: void): bool;\nexport namespace bool {\n  export const MIN_VALUE: bool = false;\n  export const MAX_VALUE: bool = true;\n}\n\n@builtin export declare function f32(value: void): f32;\nexport namespace f32 {\n  export const EPSILON = reinterpret<f32>(0x34000000); // 0x1p-23f\n  export const MIN_VALUE = reinterpret<f32>(0x00000001); // 0x0.000001p+0f\n  export const MAX_VALUE = reinterpret<f32>(0x7F7FFFFF); // 0x1.fffffep+127f\n  export const MIN_NORMAL_VALUE = reinterpret<f32>(0x00800000); // 0x1p-126f\n  export const MIN_SAFE_INTEGER: f32 = -16777215;\n  export const MAX_SAFE_INTEGER: f32 =  16777215;\n  export const POSITIVE_INFINITY: f32 =  Infinity;\n  export const NEGATIVE_INFINITY: f32 = -Infinity;\n  export const NaN: f32 = NaN;\n  @builtin export declare function abs(value: f32): f32;\n  @builtin export declare function ceil(value: f32): f32;\n  @builtin export declare function copysign(x: f32, y: f32): f32;\n  @builtin export declare function floor(value: f32): f32;\n  @builtin export declare function load(offset: usize, constantOffset?: usize): f32;\n  @builtin export declare function max(left: f32, right: f32): f32;\n  @builtin export declare function min(left: f32, right: f32): f32;\n  @builtin export declare function nearest(value: f32): f32;\n  @builtin export declare function reinterpret_i32(value: i32): f32;\n  @builtin export declare function sqrt(value: f32): f32;\n  @builtin export declare function store(offset: usize, value: f32, constantOffset?: usize): void;\n  @builtin export declare function trunc(value: f32): f32;\n  @inline  export function isNaN(value: f32): bool { return isNaN<f32>(value) }\n  @inline  export function isFinite(value: f32): bool { return isFinite<f32>(value) }\n  @inline  export function isSafeInteger(value: f32): bool { return abs<f32>(value) <= f32.MAX_SAFE_INTEGER && trunc<f32>(value) == value }\n  @inline  export function isInteger(value: f32): bool { return isFinite<f32>(value) && trunc<f32>(value) == value }\n  @inline  export function parseInt(value: string, radix: i32 = 0): f32 { return <f32>parseI64(value, radix) }\n  @inline  export function parseFloat(value: string): f32 { return <f32>parseFloat(value) }\n}\n\n@builtin export declare function f64(value: void): f64;\nexport namespace f64 {\n  export const EPSILON = reinterpret<f64>(0x3CB0000000000000); // 0x1p-52\n  export const MIN_VALUE = reinterpret<f64>(0x0000000000000001); // 0x0.0000000000001p+0\n  export const MAX_VALUE = reinterpret<f64>(0x7FEFFFFFFFFFFFFF); // 0x1.fffffffffffffp+1023\n  export const MIN_NORMAL_VALUE = reinterpret<f64>(0x0010000000000000); // 0x1p-1022\n  export const MIN_SAFE_INTEGER: f64 = -9007199254740991;\n  export const MAX_SAFE_INTEGER: f64 =  9007199254740991;\n  export const POSITIVE_INFINITY: f64 =  Infinity;\n  export const NEGATIVE_INFINITY: f64 = -Infinity;\n  export const NaN: f64 = NaN;\n  @builtin export declare function abs(value: f64): f64;\n  @builtin export declare function ceil(value: f64): f64;\n  @builtin export declare function copysign(x: f64, y: f64): f64;\n  @builtin export declare function floor(value: f64): f64;\n  @builtin export declare function load(offset: usize, constantOffset?: usize): f64;\n  @builtin export declare function max(left: f64, right: f64): f64;\n  @builtin export declare function min(left: f64, right: f64): f64;\n  @builtin export declare function nearest(value: f64): f64;\n  @builtin export declare function reinterpret_i64(value: i64): f64;\n  @builtin export declare function sqrt(value: f64): f64;\n  @builtin export declare function store(offset: usize, value: f64, constantOffset?: usize): void;\n  @builtin export declare function trunc(value: f64): f64;\n  @inline  export function isNaN(value: f64): bool { return isNaN<f64>(value) }\n  @inline  export function isFinite(value: f64): bool { return isFinite<f64>(value) }\n  @inline  export function isSafeInteger(value: f64): bool { return abs<f64>(value) <= f64.MAX_SAFE_INTEGER && trunc<f64>(value) == value }\n  @inline  export function isInteger(value: f64): bool { return isFinite<f64>(value) && trunc<f64>(value) == value }\n  @inline  export function parseInt(value: string, radix: i32 = 0): f64 { return <f64>parseI64(value, radix) }\n  @inline  export function parseFloat(value: string): f64 { return parseFloat(value) }\n}\n\n@builtin export declare function start(): void;\n","import {\n  HEADER_SIZE,\n  MAX_LENGTH,\n  allocateUnsafe,\n  compareUnsafe,\n  repeatUnsafe,\n  copyUnsafe,\n  isWhiteSpaceOrLineTerminator,\n  CharCode,\n  parse\n} from \"./internal/string\";\n\nimport {\n  STORE\n} from \"./internal/arraybuffer\";\n\n@sealed\nexport class String {\n\n  readonly length: i32; // capped to [0, MAX_LENGTH]\n\n  // TODO Add and handle second argument\n  static fromCharCode(code: i32): String {\n    var out = allocateUnsafe(1);\n    store<u16>(\n      changetype<usize>(out),\n      <u16>code,\n      HEADER_SIZE\n    );\n    return out;\n  }\n\n  static fromCodePoint(code: i32): String {\n    assert(<u32>code <= 0x10FFFF);\n    var sur = code > 0xFFFF;\n    var out = allocateUnsafe(<i32>sur + 1);\n    if (!sur) {\n      store<u16>(\n        changetype<usize>(out),\n        <u16>code,\n        HEADER_SIZE\n      );\n    } else {\n      code -= 0x10000;\n      let hi: u32 = (code >>> 10)  + 0xD800;\n      let lo: u32 = (code & 0x3FF) + 0xDC00;\n      store<u32>(\n        changetype<usize>(out),\n        (hi << 16) | lo,\n        HEADER_SIZE\n      );\n    }\n    return out;\n  }\n\n  @operator(\"[]\")\n  charAt(pos: i32): String {\n    assert(this !== null);\n\n    if (<u32>pos >= <u32>this.length) return changetype<String>(\"\");\n\n    var out = allocateUnsafe(1);\n    store<u16>(\n      changetype<usize>(out),\n      load<u16>(\n        changetype<usize>(this) + (<usize>pos << 1),\n        HEADER_SIZE\n      ),\n      HEADER_SIZE\n    );\n    return out;\n  }\n\n  charCodeAt(pos: i32): i32 {\n    assert(this !== null);\n    if (<u32>pos >= <u32>this.length) return -1; // (NaN)\n\n    return load<u16>(\n      changetype<usize>(this) + (<usize>pos << 1),\n      HEADER_SIZE\n    );\n  }\n\n  codePointAt(pos: i32): i32 {\n    assert(this !== null);\n    if (<u32>pos >= <u32>this.length) return -1; // (undefined)\n\n    var first = <i32>load<u16>(\n      changetype<usize>(this) + (<usize>pos << 1),\n      HEADER_SIZE\n    );\n    if (first < 0xD800 || first > 0xDBFF || pos + 1 == this.length) {\n      return first;\n    }\n    var second = <i32>load<u16>(\n      changetype<usize>(this) + ((<usize>pos + 1) << 1),\n      HEADER_SIZE\n    );\n    if (second < 0xDC00 || second > 0xDFFF) return first;\n    return ((first - 0xD800) << 10) + (second - 0xDC00) + 0x10000;\n  }\n\n  @operator(\"+\")\n  private static __concat(left: String, right: String): String {\n    if (!changetype<usize>(left)) left = changetype<String>(\"null\");\n    return left.concat(right);\n  }\n\n  concat(other: String): String {\n    assert(this !== null);\n    if (other === null) other = changetype<String>(\"null\");\n\n    var thisLen: isize = this.length;\n    var otherLen: isize = other.length;\n    var outLen: usize = thisLen + otherLen;\n    if (outLen == 0) return changetype<String>(\"\");\n    var out = allocateUnsafe(outLen);\n    copyUnsafe(out, 0, this, 0, thisLen);\n    copyUnsafe(out, thisLen, other, 0, otherLen);\n    return out;\n  }\n\n  endsWith(searchString: String, endPosition: i32 = MAX_LENGTH): bool {\n    assert(this !== null);\n    if (searchString === null) return false;\n    var end = min(max(endPosition, 0), this.length);\n    var searchLength: isize = searchString.length;\n    var start: isize = end - searchLength;\n    if (start < 0) return false;\n    return !compareUnsafe(this, start, searchString, 0, searchLength);\n  }\n\n  @operator(\"==\")\n  private static __eq(left: String, right: String): bool {\n    if (left === right) return true;\n    if (left === null || right === null) return false;\n\n    var leftLength = left.length;\n    if (leftLength != right.length) return false;\n\n    return !compareUnsafe(left, 0, right, 0, leftLength);\n  }\n\n  @operator(\"!=\")\n  private static __ne(left: String, right: String): bool {\n    return !this.__eq(left, right);\n  }\n\n  @operator(\">\")\n  private static __gt(left: String, right: String): bool {\n    if (left === right || left === null || right === null) return false;\n\n    var leftLength  = left.length;\n    var rightLength = right.length;\n\n    if (!leftLength)  return false;\n    if (!rightLength) return true;\n\n    var length = <usize>min<i32>(leftLength, rightLength);\n    return compareUnsafe(left, 0, right, 0, length) > 0;\n  }\n\n  @operator(\">=\")\n  private static __gte(left: String, right: String): bool {\n    if (left === right) return true;\n    if (left === null || right === null) return false;\n\n    var leftLength  = left.length;\n    var rightLength = right.length;\n\n    if (!leftLength)  return !rightLength;\n    if (!rightLength) return true;\n\n    var length = <usize>min<i32>(leftLength, rightLength);\n    return compareUnsafe(left, 0, right, 0, length) >= 0;\n  }\n\n  @operator(\"<\")\n  private static __lt(left: String, right: String): bool {\n    if (left === right || left === null || right === null) return false;\n\n    var leftLength  = left.length;\n    var rightLength = right.length;\n\n    if (!rightLength) return false;\n    if (!leftLength)  return true;\n\n    var length = <usize>min<i32>(leftLength, rightLength);\n    return compareUnsafe(left, 0, right, 0, length) < 0;\n  }\n\n  @operator(\"<=\")\n  private static __lte(left: String, right: String): bool {\n    if (left === right) return true;\n    if (left === null || right === null) return false;\n\n    var leftLength  = left.length;\n    var rightLength = right.length;\n\n    if (!rightLength) return !leftLength;\n    if (!leftLength)  return true;\n\n    var length = <usize>min<i32>(leftLength, rightLength);\n    return compareUnsafe(left, 0, right, 0, length) <= 0;\n  }\n\n  @inline\n  includes(searchString: String, position: i32 = 0): bool {\n    return this.indexOf(searchString, position) != -1;\n  }\n\n  indexOf(searchString: String, fromIndex: i32 = 0): i32 {\n    assert(this !== null);\n    if (searchString === null) searchString = changetype<String>(\"null\");\n\n    var searchLen: isize = searchString.length;\n    if (!searchLen) return 0;\n    var len: isize = this.length;\n    if (!len) return -1;\n    var start = min<isize>(max<isize>(fromIndex, 0), len);\n    len -= searchLen;\n    for (let k: isize = start; k <= len; ++k) {\n      if (!compareUnsafe(this, k, searchString, 0, searchLen)) return <i32>k;\n    }\n    return -1;\n  }\n\n  lastIndexOf(searchString: String, fromIndex: i32 = i32.MAX_VALUE): i32 {\n    assert(this !== null);\n    if (searchString === null) searchString = changetype<String>(\"null\");\n\n    var len: isize = this.length;\n    var searchLen: isize = searchString.length;\n    if (!searchLen) return len;\n    if (!len) return -1;\n    var start = min<isize>(max(fromIndex, 0), len - searchLen);\n    for (let k = start; k >= 0; --k) {\n      if (!compareUnsafe(this, k, searchString, 0, searchLen)) return <i32>k;\n    }\n    return -1;\n  }\n\n  startsWith(searchString: String, position: i32 = 0): bool {\n    assert(this !== null);\n    if (searchString === null) searchString = changetype<String>(\"null\");\n\n    var pos: isize = position;\n    var len: isize = this.length;\n    var start = min(max(pos, 0), len);\n    var searchLength: isize = searchString.length;\n    if (searchLength + start > len) return false;\n    return !compareUnsafe(this, start, searchString, 0, searchLength);\n  }\n\n  substr(start: i32, length: i32 = i32.MAX_VALUE): String {\n    assert(this !== null);\n    var intStart: isize = start;\n    var end: isize = length;\n    var size: isize = this.length;\n    if (intStart < 0) intStart = max(size + intStart, 0);\n    var resultLength = min(max(end, 0), size - intStart);\n    if (resultLength <= 0) return changetype<String>(\"\");\n    var out = allocateUnsafe(resultLength);\n    copyUnsafe(out, 0, this, intStart, resultLength);\n    return out;\n  }\n\n  substring(start: i32, end: i32 = i32.MAX_VALUE): String {\n    assert(this !== null);\n    var len = this.length;\n    var finalStart = min(max(start, 0), len);\n    var finalEnd = min(max(end, 0), len);\n    var from = min<i32>(finalStart, finalEnd);\n    var to = max<i32>(finalStart, finalEnd);\n    len = to - from;\n    if (!len) return changetype<String>(\"\");\n    if (!from && to == this.length) return this;\n    var out = allocateUnsafe(len);\n    copyUnsafe(out, 0, this, from, len);\n    return out;\n  }\n\n  trim(): String {\n    assert(this !== null);\n    var length: usize = this.length;\n\n    while (\n      length &&\n      isWhiteSpaceOrLineTerminator(\n        load<u16>(changetype<usize>(this) + (length << 1), HEADER_SIZE)\n      )\n    ) {\n      --length;\n    }\n    var start: usize = 0;\n    while (\n      start < length &&\n      isWhiteSpaceOrLineTerminator(\n        load<u16>(changetype<usize>(this) + (start << 1), HEADER_SIZE)\n      )\n    ) {\n      ++start, --length;\n    }\n    if (!length) return changetype<String>(\"\");\n    if (!start && length == this.length) return this;\n    var out = allocateUnsafe(length);\n    copyUnsafe(out, 0, this, start, length);\n    return out;\n  }\n\n  @inline\n  trimLeft(): String {\n    return this.trimStart();\n  }\n\n  @inline\n  trimRight(): String {\n    return this.trimEnd();\n  }\n\n  trimStart(): String {\n    assert(this !== null);\n    var start: isize = 0;\n    var len: isize = this.length;\n    while (\n      start < len &&\n      isWhiteSpaceOrLineTerminator(\n        load<u16>(changetype<usize>(this) + (start << 1), HEADER_SIZE)\n      )\n    ) {\n      ++start;\n    }\n    if (!start) return this;\n    var outLen = len - start;\n    if (!outLen) return changetype<String>(\"\");\n    var out = allocateUnsafe(outLen);\n    copyUnsafe(out, 0, this, start, outLen);\n    return out;\n  }\n\n  trimEnd(): String {\n    assert(this !== null);\n    var len: isize = this.length;\n    while (\n      len > 0 &&\n      isWhiteSpaceOrLineTerminator(\n        load<u16>(changetype<usize>(this) + (len << 1), HEADER_SIZE)\n      )\n    ) {\n      --len;\n    }\n    if (len <= 0) return changetype<String>(\"\");\n    if (<i32>len == this.length) return this;\n    var out = allocateUnsafe(len);\n    copyUnsafe(out, 0, this, 0, len);\n    return out;\n  }\n\n  padStart(targetLength: i32, padString: String = changetype<String>(\" \")): String {\n    assert(this !== null);\n    var length = this.length;\n    var padLen = padString.length;\n    if (targetLength < length || !padLen) return this;\n    var len = targetLength - length;\n    var out = allocateUnsafe(targetLength);\n    if (len > padLen) {\n      let count = (len - 1) / padLen;\n      let base  = count * padLen;\n      let rest  = len - base;\n      repeatUnsafe(out, 0, padString, count);\n      if (rest) copyUnsafe(out, base, padString, 0, rest);\n    } else {\n      copyUnsafe(out, 0, padString, 0, len);\n    }\n    if (length) copyUnsafe(out, len, this, 0, length);\n    return out;\n  }\n\n  padEnd(targetLength: i32, padString: String = changetype<String>(\" \")): String {\n    assert(this !== null);\n    var length = this.length;\n    var padLen = padString.length;\n    if (targetLength < length || !padLen) return this;\n    var len = targetLength - length;\n    var out = allocateUnsafe(targetLength);\n    if (length) copyUnsafe(out, 0, this, 0, length);\n    if (len > padLen) {\n      let count = (len - 1) / padLen;\n      let base = count * padLen;\n      let rest = len - base;\n      repeatUnsafe(out, length, padString, count);\n      if (rest) copyUnsafe(out, base + length, padString, 0, rest);\n    } else {\n      copyUnsafe(out, length, padString, 0, len);\n    }\n    return out;\n  }\n\n  repeat(count: i32 = 0): String {\n    assert(this !== null);\n    var length = this.length;\n\n    // Most browsers can't handle strings 1 << 28 chars or longer\n    if (count < 0 || length * count > (1 << 28)) {\n      throw new RangeError(\"Invalid count value\");\n    }\n\n    if (count == 0 || !length) return changetype<String>(\"\");\n    if (count == 1) return this;\n\n    var result = allocateUnsafe(length * count);\n    repeatUnsafe(result, 0, this, count);\n    return result;\n  }\n\n  split(separator: String = null, limit: i32 = i32.MAX_VALUE): String[] {\n    assert(this !== null);\n    if (!limit) return new Array<String>();\n    if (separator === null) return <String[]>[this];\n    var length: isize = this.length;\n    var sepLen: isize = separator.length;\n    if (limit < 0) limit = i32.MAX_VALUE;\n    if (!sepLen) {\n      if (!length) return new Array<String>();\n      // split by chars\n      length = min<isize>(length, <isize>limit);\n      let result = new Array<String>(length);\n      let buffer = <ArrayBuffer>result.buffer_;\n      for (let i: isize = 0; i < length; ++i) {\n        let char = allocateUnsafe(1);\n        store<u16>(\n          changetype<usize>(char),\n          load<u16>(\n            changetype<usize>(this) + (<usize>i << 1),\n            HEADER_SIZE\n          ),\n          HEADER_SIZE\n        );\n        STORE<String>(buffer, i, char);\n      }\n      return result;\n    } else if (!length) {\n      return <String[]>[changetype<String>(\"\")];\n    }\n    var result = new Array<String>();\n    var end = 0, start = 0, i = 0;\n    while ((end = this.indexOf(separator, start)) != -1) {\n      let len = end - start;\n      if (len > 0) {\n        let out = allocateUnsafe(len);\n        copyUnsafe(out, 0, this, start, len);\n        result.push(out);\n      } else {\n        result.push(changetype<String>(\"\"));\n      }\n      if (++i == limit) return result;\n      start = end + sepLen;\n    }\n    if (!start) return <String[]>[this];\n    var len = length - start;\n    if (len > 0) {\n      let out = allocateUnsafe(len);\n      copyUnsafe(out, 0, this, start, len);\n      result.push(out);\n    } else {\n      result.push(changetype<String>(\"\"));\n    }\n    return result;\n  }\n\n  toString(): String {\n    return this;\n  }\n\n  get lengthUTF8(): i32 {\n    var len = 1; // null terminated\n    var pos: usize = 0;\n    var end = <usize>this.length;\n    while (pos < end) {\n      let c = <u32>load<u16>(changetype<usize>(this) + (pos << 1), HEADER_SIZE);\n      if (c < 128) {\n        len += 1; ++pos;\n      } else if (c < 2048) {\n        len += 2; ++pos;\n      } else {\n        if (\n          (c & 0xFC00) == 0xD800 && pos + 1 < end &&\n          (<u32>load<u16>(changetype<usize>(this) + ((pos + 1) << 1), HEADER_SIZE) & 0xFC00) == 0xDC00\n        ) {\n          len += 4; pos += 2;\n        } else {\n          len += 3; ++pos;\n        }\n      }\n    }\n    return len;\n  }\n\n  static fromUTF8(ptr: usize, len: usize): String {\n    if (len < 1) return changetype<String>(\"\");\n    var ptrPos = <usize>0;\n    var buf = memory.allocate(<usize>len << 1);\n    var bufPos = <usize>0;\n    while (ptrPos < len) {\n      let cp = <u32>load<u8>(ptr + ptrPos++);\n      if (cp < 128) {\n        store<u16>(buf + bufPos, cp);\n        bufPos += 2;\n      } else if (cp > 191 && cp < 224) {\n        assert(ptrPos + 1 <= len);\n        store<u16>(buf + bufPos, (cp & 31) << 6 | load<u8>(ptr + ptrPos++) & 63);\n        bufPos += 2;\n      } else if (cp > 239 && cp < 365) {\n        assert(ptrPos + 3 <= len);\n        cp = (\n          (cp                       &  7) << 18 |\n          (load<u8>(ptr + ptrPos++) & 63) << 12 |\n          (load<u8>(ptr + ptrPos++) & 63) << 6  |\n           load<u8>(ptr + ptrPos++) & 63\n        ) - 0x10000;\n        store<u16>(buf + bufPos, 0xD800 + (cp >> 10));\n        bufPos += 2;\n        store<u16>(buf + bufPos, 0xDC00 + (cp & 1023));\n        bufPos += 2;\n      } else {\n        assert(ptrPos + 2 <= len);\n        store<u16>(buf + bufPos,\n          (cp                       & 15) << 12 |\n          (load<u8>(ptr + ptrPos++) & 63) << 6  |\n           load<u8>(ptr + ptrPos++) & 63\n        );\n        bufPos += 2;\n      }\n    }\n    assert(ptrPos == len);\n    var str = allocateUnsafe(<u32>(bufPos >> 1));\n    memory.copy(changetype<usize>(str) + HEADER_SIZE, buf, bufPos);\n    memory.free(buf);\n    return str;\n  }\n\n  toUTF8(): usize {\n    var buf = memory.allocate(<usize>this.lengthUTF8);\n    var pos: usize = 0;\n    var end = <usize>this.length;\n    var off: usize = 0;\n    while (pos < end) {\n      let c1 = <u32>load<u16>(changetype<usize>(this) + (pos << 1), HEADER_SIZE);\n      if (c1 < 128) {\n        store<u8>(buf + off, c1);\n        ++off; ++pos;\n      } else if (c1 < 2048) {\n        let ptr = buf + off;\n        store<u8>(ptr, c1 >> 6      | 192);\n        store<u8>(ptr, c1      & 63 | 128, 1);\n        off += 2; ++pos;\n      } else {\n        let ptr = buf + off;\n        if ((c1 & 0xFC00) == 0xD800 && pos + 1 < end) {\n          let c2 = <u32>load<u16>(changetype<usize>(this) + ((pos + 1) << 1), HEADER_SIZE);\n          if ((c2 & 0xFC00) == 0xDC00) {\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\n            store<u8>(ptr, c1 >> 18      | 240);\n            store<u8>(ptr, c1 >> 12 & 63 | 128, 1);\n            store<u8>(ptr, c1 >> 6  & 63 | 128, 2);\n            store<u8>(ptr, c1       & 63 | 128, 3);\n            off += 4; pos += 2;\n            continue;\n          }\n        }\n        store<u8>(ptr, c1 >> 12      | 224);\n        store<u8>(ptr, c1 >> 6  & 63 | 128, 1);\n        store<u8>(ptr, c1       & 63 | 128, 2);\n        off += 3; ++pos;\n      }\n    }\n    store<u8>(buf + off, 0);\n    return buf;\n  }\n}\n\nexport function parseInt(str: String, radix: i32 = 0): f64 {\n  return parse<f64>(str, radix);\n}\n\nexport function parseI32(str: String, radix: i32 = 0): i32 {\n  return parse<i32>(str, radix);\n}\n\nexport function parseI64(str: String, radix: i32 = 0): i64 {\n  return parse<i64>(str, radix);\n}\n\n// FIXME: naive implementation\nexport function parseFloat(str: String): f64 {\n  var len: i32 = str.length;\n  if (!len) return NaN;\n\n  var ptr = changetype<usize>(str) /* + HEAD -> offset */;\n  var code = <i32>load<u16>(ptr, HEADER_SIZE);\n\n  // determine sign\n  var sign: f64;\n  if (code == CharCode.MINUS) {\n    if (!--len) return NaN;\n    code = <i32>load<u16>(ptr += 2, HEADER_SIZE);\n    sign = -1;\n  } else if (code == CharCode.PLUS) {\n    if (!--len) return NaN;\n    code = <i32>load<u16>(ptr += 2, HEADER_SIZE);\n    sign = 1;\n  } else {\n    sign = 1;\n  }\n\n  // calculate value\n  var num: f64 = 0;\n  while (len--) {\n    code = <i32>load<u16>(ptr, HEADER_SIZE);\n    if (code == CharCode.DOT) {\n      ptr += 2;\n      let fac: f64 = 0.1; // precision :(\n      while (len--) {\n        code = <i32>load<u16>(ptr, HEADER_SIZE);\n        if (code == CharCode.E || code == CharCode.e) {\n          assert(false); // TODO\n        }\n        code -= CharCode._0;\n        if (<u32>code > 9) break;\n        num += <f64>code * fac;\n        fac *= 0.1;\n        ptr += 2;\n      }\n      break;\n    }\n    code -= CharCode._0;\n    if (<u32>code >= 10) break;\n    num = (num * 10) + code;\n    ptr += 2;\n  }\n  return sign * num;\n}\n","import { MAX_SIZE_32 } from \"./allocator\";\nimport { String } from \"../string\";\n\n/** Size of a String header. */\nexport const HEADER_SIZE = (offsetof<String>() + 1) & ~1; // 2 byte aligned\n/** Maximum length of a String. */\nexport const MAX_LENGTH = (<i32>MAX_SIZE_32 - HEADER_SIZE) >>> 1;\n\n// Low-level utility\n\nfunction __gc(ref: usize): void {}\n\nexport function allocateUnsafe(length: i32): String {\n  assert(length > 0 && length <= MAX_LENGTH);\n  var buffer: usize;\n  if (isManaged<String>()) {\n    buffer = __gc_allocate(HEADER_SIZE + (<usize>length << 1), __gc);  // tslint:disable-line\n  } else {\n    buffer = memory.allocate(HEADER_SIZE + (<usize>length << 1));\n  }\n  store<i32>(buffer, length);\n  return changetype<String>(buffer);\n}\n\n@inline\nexport function freeUnsafe(buffer: String): void {\n  if (!isManaged<String>()) {\n    assert(buffer);\n    memory.free(changetype<usize>(buffer));\n  }\n}\n\nexport function copyUnsafe(dest: String, destOffset: usize, src: String, srcOffset: usize, len: usize): void {\n  memory.copy(\n    changetype<usize>(dest) + (destOffset << 1) + HEADER_SIZE,\n    changetype<usize>(src)  + (srcOffset  << 1) + HEADER_SIZE,\n    len << 1\n  );\n}\n\nexport function compareUnsafe(str1: String, offset1: usize, str2: String, offset2: usize, len: usize): i32 {\n  var cmp: i32 = 0;\n  var ptr1 = changetype<usize>(str1) + (offset1 << 1);\n  var ptr2 = changetype<usize>(str2) + (offset2 << 1);\n  while (len && !(cmp = <i32>load<u16>(ptr1, HEADER_SIZE) - <i32>load<u16>(ptr2, HEADER_SIZE))) {\n    --len, ptr1 += 2, ptr2 += 2;\n  }\n  return cmp;\n}\n\nexport function repeatUnsafe(dest: String, destOffset: usize, src: String, count: i32): void {\n  var length = src.length;\n  if (ASC_SHRINK_LEVEL > 1) {\n    let strLen = length << 1;\n    let to   = changetype<usize>(dest) + HEADER_SIZE + (destOffset << 1);\n    let from = changetype<usize>(src)  + HEADER_SIZE;\n    for (let i = 0, len = strLen * count; i < len; i += strLen) {\n      memory.copy(to + i, from, strLen);\n    }\n  } else {\n    switch (length) {\n      case 0: break;\n      case 1: {\n        let cc =  load<u16>(changetype<usize>(src), HEADER_SIZE);\n        let out = changetype<usize>(dest) + (destOffset << 1);\n        for (let i = 0; i < count; ++i) {\n          store<u16>(out + (i << 1), cc, HEADER_SIZE);\n        }\n        break;\n      }\n      case 2: {\n        let cc  = load<u32>(changetype<usize>(src), HEADER_SIZE);\n        let out = changetype<usize>(dest) + (destOffset << 1);\n        for (let i = 0; i < count; ++i) {\n          store<u32>(out + (i << 2), cc, HEADER_SIZE);\n        }\n        break;\n      }\n      case 3: {\n        let cc1 = load<u32>(changetype<usize>(src), HEADER_SIZE + 0);\n        let cc2 = load<u16>(changetype<usize>(src), HEADER_SIZE + 4);\n        let out = changetype<usize>(dest) + (destOffset << 1);\n        for (let i = 0; i < count; ++i) {\n          store<u32>(out + (i << 2), cc1, HEADER_SIZE + 0);\n          store<u16>(out + (i << 1), cc2, HEADER_SIZE + 4);\n        }\n        break;\n      }\n      case 4: {\n        let cc = load<u64>(changetype<usize>(src), HEADER_SIZE);\n        let out = changetype<usize>(dest) + (destOffset << 1);\n        for (let i = 0; i < count; ++i) {\n          store<u64>(out + (i << 3), cc, HEADER_SIZE);\n        }\n        break;\n      }\n      default: {\n        let strLen = length << 1;\n        let to   = changetype<usize>(dest) + HEADER_SIZE + (destOffset << 1);\n        let from = changetype<usize>(src)  + HEADER_SIZE;\n        for (let i = 0, len = strLen * count; i < len; i += strLen) {\n          memory.copy(to + i, from, strLen);\n        }\n        break;\n      }\n    }\n  }\n}\n\n// Helpers\n\nexport const enum CharCode {\n  PLUS = 0x2B,\n  MINUS = 0x2D,\n  DOT = 0x2E,\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n  A = 0x41,\n  B = 0x42,\n  E = 0x45,\n  N = 0x4E,\n  O = 0x4F,\n  X = 0x58,\n  Z = 0x5a,\n  a = 0x61,\n  b = 0x62,\n  e = 0x65,\n  n = 0x6E,\n  o = 0x6F,\n  x = 0x78,\n  z = 0x7A\n}\n\nexport function isWhiteSpaceOrLineTerminator(c: u16): bool {\n  switch (c) {\n    case 9:    // <TAB>\n    case 10:   // <LF>\n    case 13:   // <CR>\n    case 11:   // <VT>\n    case 12:   // <FF>\n    case 32:   // <SP>\n    case 160:  // <NBSP>\n    case 8232: // <LS>\n    case 8233: // <PS>\n    case 65279: return true; // <ZWNBSP>\n    default: return false;\n  }\n}\n\n/** Parses a string to an integer (usually), using the specified radix. */\nexport function parse<T>(str: String, radix: i32 = 0): T {\n  var len: i32 = str.length;\n  if (!len) return <T>NaN;\n\n  var ptr = changetype<usize>(str) /* + HEAD -> offset */;\n  var code = <i32>load<u16>(ptr, HEADER_SIZE);\n\n  // determine sign\n  var sign: T;\n  if (code == CharCode.MINUS) {\n    if (!--len) return <T>NaN;\n    code = <i32>load<u16>(ptr += 2, HEADER_SIZE);\n    sign = -1;\n  } else if (code == CharCode.PLUS) {\n    if (!--len) return <T>NaN;\n    code = <i32>load<u16>(ptr += 2, HEADER_SIZE);\n    sign = 1;\n  } else {\n    sign = 1;\n  }\n\n  // determine radix\n  if (!radix) {\n    if (code == CharCode._0 && len > 2) {\n      switch (<i32>load<u16>(ptr + 2, HEADER_SIZE)) {\n        case CharCode.B:\n        case CharCode.b: {\n          ptr += 4; len -= 2;\n          radix = 2;\n          break;\n        }\n        case CharCode.O:\n        case CharCode.o: {\n          ptr += 4; len -= 2;\n          radix = 8;\n          break;\n        }\n        case CharCode.X:\n        case CharCode.x: {\n          ptr += 4; len -= 2;\n          radix = 16;\n          break;\n        }\n        default: radix = 10;\n      }\n    } else radix = 10;\n  } else if (radix < 2 || radix > 36) {\n    return <T>NaN;\n  }\n\n  // calculate value\n  var num: T = 0;\n  while (len--) {\n    code = <i32>load<u16>(ptr, HEADER_SIZE);\n    if (code >= CharCode._0 && code <= CharCode._9) {\n      code -= CharCode._0;\n    } else if (code >= CharCode.A && code <= CharCode.Z) {\n      code -= CharCode.A - 10;\n    } else if (code >= CharCode.a && code <= CharCode.z) {\n      code -= CharCode.a - 10;\n    } else break;\n    if (code >= radix) break;\n    num = (num * radix) + code;\n    ptr += 2;\n  }\n  return sign * num;\n}\n","import {\n  HEADER_SIZE\n} from \"./string\";\n\n/** Computes the 32-bit hash of a value of any type. */\n@inline\nexport function HASH<T>(key: T): u32 {\n  // branch-level tree-shaking makes this a `(return (call ...))`\n  if (isString(key)) {\n    return hashStr(key);\n  } else if (isReference<T>()) {\n    if (sizeof<T>() == 4) return hash32(changetype<u32>(key));\n    if (sizeof<T>() == 8) return hash64(changetype<u64>(key));\n  } else if (isFloat<T>()) {\n    if (sizeof<T>() == 4) return hash32(reinterpret<u32>(key));\n    if (sizeof<T>() == 8) return hash64(reinterpret<u64>(key));\n  } else {\n    if (sizeof<T>() == 1) return hash8 (<u32>key);\n    if (sizeof<T>() == 2) return hash16(<u32>key);\n    if (sizeof<T>() == 4) return hash32(<u32>key);\n    if (sizeof<T>() == 8) return hash64(<u64>key);\n  }\n  unreachable();\n}\n\n// FNV-1a 32-bit as a starting point, see: http://isthe.com/chongo/tech/comp/fnv/\n\nconst FNV_OFFSET: u32 = 2166136261;\nconst FNV_PRIME: u32 = 16777619;\n\nfunction hash8(key: u32): u32 {\n  return (FNV_OFFSET ^ key) * FNV_PRIME;\n}\n\nfunction hash16(key: u32): u32 {\n  var v = FNV_OFFSET;\n  v = (v ^ ( key        & 0xff)) * FNV_PRIME;\n  v = (v ^ ( key >>  8        )) * FNV_PRIME;\n  return v;\n}\n\nfunction hash32(key: u32): u32 {\n  var v = FNV_OFFSET;\n  v = (v ^ ( key        & 0xff)) * FNV_PRIME;\n  v = (v ^ ((key >>  8) & 0xff)) * FNV_PRIME;\n  v = (v ^ ((key >> 16) & 0xff)) * FNV_PRIME;\n  v = (v ^ ( key >> 24        )) * FNV_PRIME;\n  return v;\n}\n\nfunction hash64(key: u64): u32 {\n  var l = <u32> key;\n  var h = <u32>(key >>> 32);\n  var v = FNV_OFFSET;\n  v = (v ^ ( l        & 0xff)) * FNV_PRIME;\n  v = (v ^ ((l >>  8) & 0xff)) * FNV_PRIME;\n  v = (v ^ ((l >> 16) & 0xff)) * FNV_PRIME;\n  v = (v ^ ( l >> 24        )) * FNV_PRIME;\n  v = (v ^ ( h        & 0xff)) * FNV_PRIME;\n  v = (v ^ ((h >>  8) & 0xff)) * FNV_PRIME;\n  v = (v ^ ((h >> 16) & 0xff)) * FNV_PRIME;\n  v = (v ^ ( h >> 24        )) * FNV_PRIME;\n  return v;\n}\n\nfunction hashStr(key: string): u32 {\n  var v = FNV_OFFSET;\n  for (let i: usize = 0, k: usize = key.length << 1; i < k; ++i) {\n    v = (v ^ <u32>load<u8>(changetype<usize>(key) + i, HEADER_SIZE)) * FNV_PRIME;\n  }\n  return v;\n}\n"]}
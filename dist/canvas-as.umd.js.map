{"version":3,"file":"canvas-as.umd.js","sources":["../src/shared/Direction.ts","../src/shared/FillRule.ts","../src/shared/GlobalCompositeOperation.ts","../src/shared/ImageSmoothingQuality.ts","../src/shared/LineCap.ts","../src/shared/LineJoin.ts","../src/shared/TextAlign.ts","../src/shared/TextBaseline.ts","../src/util/GlobalCompositeOperationLookup.ts","../src/util/ICanvasPatternIndex.ts","../src/interop/CanvasASInterop.ts"],"sourcesContent":["export enum Direction {\r\n  ltr = 0,\r\n  rtl = 1,\r\n  inherit = 2,\r\n}\r\n","export enum FillRule {\r\n  nonzero = 0,\r\n  evenodd = 1,\r\n}\r\n","export enum GlobalCompositeOperation {\r\n  source_over = 0,\r\n  source_in = 1,\r\n  source_out = 2,\r\n  source_atop = 3,\r\n  destination_over = 4,\r\n  destination_in = 5,\r\n  destination_out = 6,\r\n  destination_atop = 7,\r\n  lighter = 8,\r\n  copy = 9,\r\n  xor = 10,\r\n  multiply = 11,\r\n  screen = 12,\r\n  overlay = 13,\r\n  darken = 14,\r\n  lighten = 15,\r\n  color_dodge = 16,\r\n  color_burn = 17,\r\n  hard_light = 18,\r\n  soft_light = 19,\r\n  difference = 20,\r\n  exclusion = 21,\r\n  hue = 22,\r\n  saturation = 23,\r\n  color = 24,\r\n  luminosity = 25,\r\n}\r\n","export enum ImageSmoothingQuality {\r\n  low = 0,\r\n  medium = 1,\r\n  high = 2,\r\n}\r\n","export enum LineCap {\r\n  butt = 0,\r\n  round = 1,\r\n  square = 2,\r\n}\r\n","export enum LineJoin {\r\n  bevel = 0,\r\n  round = 1,\r\n  miter = 2,\r\n}\r\n","export enum TextAlign {\r\n  left = 0,\r\n  right = 1,\r\n  center = 2,\r\n  start = 3,\r\n  end = 4,\r\n}\r\n","export enum TextBaseline {\r\n  top = 0,\r\n  hanging = 1,\r\n  middle = 2,\r\n  alphabetic = 3,\r\n  ideographic = 4,\r\n  bottom = 5,\r\n}\r\n","export enum GlobalCompositeOperationLookup {\r\n  \"source-over\" = 0,\r\n  \"source-in\" = 1,\r\n  \"source-out\" = 2,\r\n  \"source-atop\" = 3,\r\n  \"destination-over\" = 4,\r\n  \"destination-in\" = 5,\r\n  \"destination-out\" = 6,\r\n  \"destination-atop\" = 7,\r\n  \"lighter\" = 8,\r\n  \"copy\" = 9,\r\n  \"xor\" = 10,\r\n  \"multiply\" = 11,\r\n  \"screen\" = 12,\r\n  \"overlay\" = 13,\r\n  \"darken\" = 14,\r\n  \"lighten\" = 15,\r\n  \"color-dodge\" = 16,\r\n  \"color-burn\" = 17,\r\n  \"hard-light\" = 18,\r\n  \"soft-light\" = 19,\r\n  \"difference\" = 20,\r\n  \"exclusion\" = 21,\r\n  \"hue\" = 22,\r\n  \"saturation\" = 23,\r\n  \"color\" = 24,\r\n  \"luminosity\" = 25,\r\n}\r\n","export interface ICanvasPatternIndex {\r\n  [index: number]: CanvasPattern | null;\r\n}\r\n\r\nexport const canvasPatternTypes = {\r\n  \"0\": \"repeat\",\r\n  \"1\": \"repeat-x\",\r\n  \"2\": \"repeat-y\",\r\n  \"3\": \"no-repeat\",\r\n};\r\n","import { ASUtil, instantiateStreaming } from \"assemblyscript/lib/loader\";\r\nimport {\r\n  CanvasPatternType,\r\n  CanvasInstruction,\r\n  Direction,\r\n  FillRule,\r\n  LineCap,\r\n  LineJoin,\r\n  ImageSmoothingQuality,\r\n  TextAlign,\r\n  TextBaseline,\r\n} from \"../shared\";\r\nimport { GlobalCompositeOperationLookup, IStringIndex, IImageBitmapIndex, ICanvasPatternIndex, ICanvasGradientIndex, canvasPatternTypes } from \"../util\";\r\nimport { ImageLoadedCallback, ImageInjectCallback } from \"../util/ImageLoadedCallbacks\";\r\n\r\n\r\nexport interface CanvasASInteropAPI {\r\n  init(): void;\r\n  draw(): number;\r\n  update(): void;\r\n}\r\n\r\nexport class CanvasASInterop<T> {\r\n  public ctx: CanvasRenderingContext2D;\r\n  public strings: Map<number, string> = new Map<number, string>();\r\n  public images: IImageBitmapIndex = {};\r\n  public patterns: ICanvasPatternIndex = {};\r\n  public gradients: ICanvasGradientIndex = {};\r\n  public wasm: (ASUtil & CanvasASInteropAPI & T) | null = null;\r\n  public loaded: Promise<void>;\r\n\r\n  private image_loaded_internal: number = 0;\r\n  private inject_internal: number = 0;\r\n\r\n  constructor(ctx: CanvasRenderingContext2D, res: Promise<Response>, imports: any) {\r\n    this.ctx = ctx;\r\n    this.loaded = this.init(res, imports);\r\n  }\r\n\r\n  public injectImage(name: string, value: Promise<Response>): this {\r\n    const strPtr: number = this.wasm!.newString(name);\r\n    value.then(e => e.blob())\r\n      .then(e => createImageBitmap(e))\r\n      .then(e => this.loaded.then(f => e))\r\n      .then(bitmap => {\r\n        const injectFunc = this.wasm!.getFunction(this.inject_internal) as ImageInjectCallback;\r\n        const imagePointer: number = injectFunc(strPtr);\r\n        const imageIndex: number = imagePointer / Int32Array.BYTES_PER_ELEMENT;\r\n        this.images[this.wasm!.I32[imageIndex]] = bitmap;\r\n        const loadedFunc = this.wasm!.getFunction(this.image_loaded_internal) as ImageLoadedCallback;\r\n        loadedFunc(imagePointer, bitmap.width, bitmap.height);\r\n      });\r\n    return this;\r\n  }\r\n\r\n  private async init(res: Promise<Response>, imports: any = {}): Promise<void> {\r\n    imports.__as_interop = {\r\n      add_color_stop: this.add_color_stop.bind(this),\r\n      create_image: this.create_image.bind(this),\r\n      create_linear_gradient: this.create_linear_gradient.bind(this),\r\n      create_pattern: this.create_pattern.bind(this),\r\n      create_radial_gradient: this.create_radial_gradient.bind(this),\r\n      create_string: this.create_string.bind(this),\r\n      remove_image: this.remove_image.bind(this),\r\n      remove_gradient: this.remove_gradient.bind(this),\r\n      remove_pattern: this.remove_pattern.bind(this),\r\n      report_inject_function: this.report_inject_function.bind(this),\r\n    };\r\n    this.wasm = await instantiateStreaming<CanvasASInteropAPI & T>(res, imports);\r\n    this.wasm.init();\r\n  }\r\n\r\n  public update(): void {\r\n    this.wasm!.update();\r\n  }\r\n\r\n  public draw(): void {\r\n    const data: Float64Array = this.wasm!.getArray(Float64Array as any, this.wasm!.draw());\r\n    this.render(data);\r\n  }\r\n\r\n  private render(data: Float64Array): void {\r\n    var index: number = 0;\r\n    var stride: number = 0;\r\n    while (index < data.length) {\r\n      if (data[index] === CanvasInstruction.Commit) {\r\n        this.strings.clear();\r\n        break;\r\n      }\r\n      stride = data[index + 1];\r\n      switch(data[index]) {\r\n        case CanvasInstruction.Arc: {\r\n          this.ctx.arc(\r\n            data[index + 2],\r\n            data[index + 3],\r\n            data[index + 4],\r\n            data[index + 5],\r\n            data[index + 6],\r\n            data[index + 7] === 1,\r\n          );\r\n          break;\r\n        }\r\n        case CanvasInstruction.ArcTo: {\r\n          this.ctx.arcTo(\r\n            data[index + 2],\r\n            data[index + 3],\r\n            data[index + 4],\r\n            data[index + 5],\r\n            data[index + 6],\r\n          );\r\n          break;\r\n        }\r\n        case CanvasInstruction.BeginPath: {\r\n          this.ctx.beginPath();\r\n          break;\r\n        }\r\n        case CanvasInstruction.BezierCurveTo: {\r\n          this.ctx.bezierCurveTo(\r\n            data[index + 2],\r\n            data[index + 3],\r\n            data[index + 4],\r\n            data[index + 5],\r\n            data[index + 6],\r\n            data[index + 7],\r\n          );\r\n          break;\r\n        }\r\n        case CanvasInstruction.ClearRect: {\r\n          this.ctx.clearRect(\r\n            data[index + 2],\r\n            data[index + 3],\r\n            data[index + 4],\r\n            data[index + 5],\r\n          );\r\n          break;\r\n        }\r\n        case CanvasInstruction.Clip: {\r\n          this.ctx.clip();\r\n          break;\r\n        }\r\n        case CanvasInstruction.ClosePath: {\r\n          this.ctx.closePath();\r\n          break;\r\n        }\r\n        case CanvasInstruction.Direction: {\r\n          this.ctx.direction = Direction[data[index + 2]] as CanvasDirection;\r\n          break;\r\n        }\r\n        case CanvasInstruction.DrawImage: {\r\n          if (!this.images[data[index + 2]]) break;\r\n          this.ctx.drawImage(\r\n            this.images[data[index + 2]]!,\r\n            data[index + 3],\r\n            data[index + 4],\r\n            data[index + 5],\r\n            data[index + 6],\r\n            data[index + 7],\r\n            data[index + 8],\r\n            data[index + 9],\r\n            data[index + 10],\r\n          );\r\n          break;\r\n        }\r\n        case CanvasInstruction.Ellipse: {\r\n          this.ctx.ellipse(\r\n            data[index + 2],\r\n            data[index + 3],\r\n            data[index + 4],\r\n            data[index + 5],\r\n            data[index + 6],\r\n            data[index + 7],\r\n            data[index + 8],\r\n            data[index + 9] === 1.0,\r\n          );\r\n          break;\r\n        }\r\n        case CanvasInstruction.Fill: {\r\n          this.ctx.fill(FillRule[data[index + 2]] as CanvasFillRule);\r\n          break;\r\n        }\r\n        case CanvasInstruction.FillGradient: {\r\n          this.ctx.fillStyle = this.gradients[data[index + 2]]!;\r\n          break;\r\n        }\r\n        case CanvasInstruction.FillPattern: {\r\n          this.ctx.fillStyle = this.patterns[data[index + 2]]!;\r\n          break;\r\n        }\r\n        case CanvasInstruction.FillRect: {\r\n          this.ctx.fillRect(\r\n            data[index + 2],\r\n            data[index + 3],\r\n            data[index + 4],\r\n            data[index + 5],\r\n          );\r\n          break;\r\n        }\r\n        case CanvasInstruction.FillStyle: {\r\n          if (!this.strings.has(data[index + 2])) continue;\r\n          this.ctx.fillStyle = this.strings.get(data[index + 2])!;\r\n          break;\r\n        }\r\n        case CanvasInstruction.FillText: {\r\n          if (!this.strings.has(data[index + 2])) continue;\r\n          this.ctx.fillText(\r\n            this.strings.get(data[index + 2])!,\r\n            data[index + 3],\r\n            data[index + 4],\r\n            data[index + 5] === -1 ? void 0 : data[index + 5],\r\n          );\r\n          break;\r\n        }\r\n        case CanvasInstruction.Filter: {\r\n          if (!this.strings.has(data[index + 2])) continue;\r\n          this.ctx.filter = this.strings.get(data[index + 2])!;\r\n          break;\r\n        }\r\n        case CanvasInstruction.Font: {\r\n          if (!this.strings.has(data[index + 2])) continue;\r\n          this.ctx.font = this.strings.get(data[index + 2])!;\r\n          break;\r\n        }\r\n        case CanvasInstruction.GlobalAlpha: {\r\n          this.ctx.globalAlpha = data[index + 2];\r\n          break;\r\n        }\r\n        case CanvasInstruction.GlobalCompositeOperation: {\r\n          this.ctx.globalCompositeOperation = GlobalCompositeOperationLookup[data[index + 2]];\r\n          break;\r\n        }\r\n        case CanvasInstruction.ImageSmoothingEnabled: {\r\n          this.ctx.imageSmoothingEnabled = data[index + 2] === 1.0;\r\n          break;\r\n        }\r\n        case CanvasInstruction.ImageSmoothingQuality: {\r\n          this.ctx.imageSmoothingQuality = ImageSmoothingQuality[data[index + 2]] as \"high\" | \"low\" | \"medium\";\r\n          break;\r\n        }\r\n        case CanvasInstruction.LineCap: {\r\n          this.ctx.lineCap = LineCap[data[index + 2]] as CanvasLineCap;\r\n          break;\r\n        }\r\n        case CanvasInstruction.LineDash: {\r\n          // setLineDash accepts a typed array instead of just a number[]\r\n          this.ctx.setLineDash(this.wasm!.getArray(Float64Array as any, data[index + 2]) as any);\r\n          break;\r\n        }\r\n        case CanvasInstruction.LineDashOffset: {\r\n          this.ctx.lineDashOffset = data[index + 2];\r\n          break;\r\n        }\r\n        case CanvasInstruction.LineJoin: {\r\n          this.ctx.lineJoin = LineJoin[data[index + 2]] as CanvasLineJoin;\r\n          break;\r\n        }\r\n        case CanvasInstruction.LineTo: {\r\n          this.ctx.lineTo(data[index + 2], data[index + 3]);\r\n          break;\r\n        }\r\n        case CanvasInstruction.LineWidth: {\r\n          this.ctx.lineWidth = data[index + 2];\r\n          break;\r\n        }\r\n        case CanvasInstruction.MiterLimit: {\r\n          this.ctx.miterLimit = data[index + 2];\r\n          break;\r\n        }\r\n        case CanvasInstruction.MoveTo: {\r\n          this.ctx.moveTo(data[index + 2], data[index + 3]);\r\n          break;\r\n        }\r\n        case CanvasInstruction.QuadraticCurveTo: {\r\n          this.ctx.quadraticCurveTo(\r\n            data[index + 2],\r\n            data[index + 3],\r\n            data[index + 4],\r\n            data[index + 5],\r\n          );\r\n          break;\r\n        }\r\n        case CanvasInstruction.Rect: {\r\n          this.ctx.rect(\r\n            data[index + 2],\r\n            data[index + 3],\r\n            data[index + 4],\r\n            data[index + 5],\r\n          );\r\n          break;\r\n        }\r\n        case CanvasInstruction.Restore: {\r\n          this.ctx.restore();\r\n          break;\r\n        }\r\n        case CanvasInstruction.Rotate: {\r\n          this.ctx.rotate(data[index + 2]);\r\n          break;\r\n        }\r\n        case CanvasInstruction.Save: {\r\n          this.ctx.save();\r\n          break;\r\n        }\r\n        case CanvasInstruction.Scale: {\r\n          this.ctx.scale(data[index + 2], data[index + 3]);\r\n          break;\r\n        }\r\n        case CanvasInstruction.SetTransform: {\r\n          this.ctx.setTransform(\r\n            data[index + 2],\r\n            data[index + 3],\r\n            data[index + 4],\r\n            data[index + 5],\r\n            data[index + 6],\r\n            data[index + 7],\r\n          );\r\n          break;\r\n        }\r\n        case CanvasInstruction.ShadowBlur: {\r\n          this.ctx.shadowBlur = data[index + 2];\r\n          break;\r\n        }\r\n        case CanvasInstruction.ShadowColor: {\r\n          if (!this.strings.has(data[index + 2])) continue;\r\n          this.ctx.shadowColor = this.strings.get(data[index + 2])!;\r\n          break;\r\n        }\r\n        case CanvasInstruction.ShadowOffsetX: {\r\n          this.ctx.shadowOffsetX = data[index + 2];\r\n          break;\r\n        }\r\n        case CanvasInstruction.ShadowOffsetY: {\r\n          this.ctx.shadowOffsetY = data[index + 2];\r\n          break;\r\n        }\r\n        case CanvasInstruction.StrokeStyle: {\r\n          if (!this.strings.has(data[index + 2]))\r\n          this.ctx.fillStyle = this.strings.get(data[index + 2])!;\r\n          break;\r\n        }\r\n        case CanvasInstruction.StrokeGradient: {\r\n          this.ctx.strokeStyle = this.gradients[data[index + 2]]!;\r\n          break;\r\n        }\r\n        case CanvasInstruction.StrokePattern: {\r\n          this.ctx.strokeStyle = this.patterns[data[index + 2]]!;\r\n          break;\r\n        }\r\n        case CanvasInstruction.TextAlign: {\r\n          this.ctx.textAlign = TextAlign[data[index + 2]] as CanvasTextAlign;\r\n          break;\r\n        }\r\n        case CanvasInstruction.TextBaseline: {\r\n          this.ctx.textBaseline = TextBaseline[data[index + 2]] as CanvasTextBaseline;\r\n          break;\r\n        }\r\n        case CanvasInstruction.Transform: {\r\n          this.ctx.transform(\r\n            data[index + 2],\r\n            data[index + 3],\r\n            data[index + 4],\r\n            data[index + 5],\r\n            data[index + 6],\r\n            data[index + 7],\r\n          );\r\n          break;\r\n        }\r\n        case CanvasInstruction.Translate: {\r\n          this.ctx.translate(data[index + 2], data[index + 3]);\r\n          break;\r\n        }\r\n        default:\r\n          throw new Error(\"Invalid canvas instruction type: \" + data[index]);\r\n      }\r\n      index += stride;\r\n    }\r\n  }\r\n\r\n  private add_color_stop(index: number, point: number, color: number): void {\r\n    this.gradients[index]!.addColorStop(point, this.wasm!.getString(color));\r\n  }\r\n\r\n  private create_image(imagePointer: number, sourcePointer: number): void {\r\n    this.load_image(imagePointer, sourcePointer);\r\n  }\r\n\r\n  private create_linear_gradient(index: number, x0: number, y0: number, x1: number, y1: number): void {\r\n    this.gradients[index] = this.ctx.createLinearGradient(x0, y0, x1, y1);\r\n  }\r\n\r\n  private create_pattern(index: number, imageIndex: number, patternType: CanvasPatternType): void {\r\n    this.patterns[index] = this.ctx.createPattern(this.images[imageIndex]!, canvasPatternTypes[patternType]);\r\n  }\r\n\r\n  private create_radial_gradient(index: number, x0: number, y0: number, r0: number, x1: number, y1: number, r1: number): void {\r\n    this.gradients[index] = this.ctx.createRadialGradient(x0, y0, r0, x1, y1, r1);\r\n  }\r\n\r\n  private create_string(index: number, stringPointer: number): void {\r\n    this.strings.set(index, this.wasm!.getString(stringPointer));\r\n  }\r\n\r\n  private remove_image(index: number): void {\r\n    this.images[index] = null;\r\n  }\r\n\r\n  private remove_pattern(index: number): void {\r\n    this.patterns[index] = null;\r\n  }\r\n\r\n  private remove_gradient(index: number): void {\r\n    this.gradients[index] = null;\r\n  }\r\n\r\n  private async load_image(imagePointer: number, sourcePointer: number): Promise<void> {\r\n    const source: string = this.wasm!.getString(sourcePointer);\r\n    const res: Response = await fetch(source);\r\n    const blob: Blob = await res.blob();\r\n    const img: ImageBitmap = await createImageBitmap(blob);\r\n\r\n    const imageIndex: number = imagePointer / Int32Array.BYTES_PER_ELEMENT;\r\n    this.images[this.wasm!.I32[imageIndex]] = img;\r\n    const imageLoadedFunc = this.wasm!.getFunction(this.image_loaded_internal) as ImageLoadedCallback;\r\n    imageLoadedFunc(imagePointer, img.width, img.height);\r\n  }\r\n\r\n  private report_inject_function(injectPointer: number, loadedPointer: number): void {\r\n    this.inject_internal = injectPointer;\r\n    this.image_loaded_internal = loadedPointer;\r\n  }\r\n}"],"names":["Direction","FillRule","GlobalCompositeOperation","ImageSmoothingQuality","LineCap","LineJoin","TextAlign","TextBaseline","GlobalCompositeOperationLookup","canvasPatternTypes","CanvasASInterop","constructor","ctx","res","imports","Map","loaded","this","init","injectImage","name","value","strPtr","wasm","newString","then","e","blob","createImageBitmap","f","bitmap","imagePointer","getFunction","inject_internal","injectFunc","imageIndex","Int32Array","BYTES_PER_ELEMENT","images","I32","image_loaded_internal","loadedFunc","width","height","__as_interop","_this","add_color_stop","bind","create_image","create_linear_gradient","create_pattern","create_radial_gradient","create_string","remove_image","remove_gradient","remove_pattern","report_inject_function","instantiateStreaming","update","draw","data","getArray","Float64Array","render","index","stride","length","strings","clear","arc","arcTo","beginPath","bezierCurveTo","clearRect","clip","closePath","direction","drawImage","ellipse","fill","fillStyle","gradients","patterns","fillRect","has","get","fillText","filter","font","globalAlpha","globalCompositeOperation","imageSmoothingEnabled","imageSmoothingQuality","lineCap","setLineDash","lineDashOffset","lineJoin","lineTo","lineWidth","miterLimit","moveTo","quadraticCurveTo","rect","restore","rotate","save","scale","setTransform","shadowBlur","shadowColor","shadowOffsetX","shadowOffsetY","strokeStyle","textAlign","textBaseline","transform","translate","Error","point","color","addColorStop","getString","sourcePointer","load_image","x0","y0","x1","y1","createLinearGradient","patternType","createPattern","r0","r1","createRadialGradient","stringPointer","set","source","_this2","fetch","img","imageLoadedFunc","injectPointer","loadedPointer"],"mappings":"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"}
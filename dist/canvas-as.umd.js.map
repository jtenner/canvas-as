{"version":3,"file":"canvas-as.umd.js","sources":["../src/shared/Direction.ts","../src/shared/FillRule.ts","../src/shared/GlobalCompositeOperation.ts","../src/shared/ImageSmoothingQuality.ts","../src/shared/LineCap.ts","../src/shared/LineJoin.ts","../src/shared/TextAlign.ts","../src/shared/TextBaseline.ts","../src/util/GlobalCompositeOperationLookup.ts","../src/util/ICanvasPatternIndex.ts","../src/interop/CanvasASInterop.ts"],"sourcesContent":["export enum Direction {\r\n  ltr = 0,\r\n  rtl = 1,\r\n  inherit = 2,\r\n}\r\n","export enum FillRule {\r\n  nonzero = 0,\r\n  evenodd = 1,\r\n}\r\n","export enum GlobalCompositeOperation {\r\n  source_over = 0,\r\n  source_in = 1,\r\n  source_out = 2,\r\n  source_atop = 3,\r\n  destination_over = 4,\r\n  destination_in = 5,\r\n  destination_out = 6,\r\n  destination_atop = 7,\r\n  lighter = 8,\r\n  copy = 9,\r\n  xor = 10,\r\n  multiply = 11,\r\n  screen = 12,\r\n  overlay = 13,\r\n  darken = 14,\r\n  lighten = 15,\r\n  color_dodge = 16,\r\n  color_burn = 17,\r\n  hard_light = 18,\r\n  soft_light = 19,\r\n  difference = 20,\r\n  exclusion = 21,\r\n  hue = 22,\r\n  saturation = 23,\r\n  color = 24,\r\n  luminosity = 25,\r\n}\r\n","export enum ImageSmoothingQuality {\r\n  low = 0,\r\n  medium = 1,\r\n  high = 2,\r\n}\r\n","export enum LineCap {\r\n  butt = 0,\r\n  round = 1,\r\n  square = 2,\r\n}\r\n","export enum LineJoin {\r\n  bevel = 0,\r\n  round = 1,\r\n  miter = 2,\r\n}\r\n","export enum TextAlign {\r\n  left = 0,\r\n  right = 1,\r\n  center = 2,\r\n  start = 3,\r\n  end = 4,\r\n}\r\n","export enum TextBaseline {\r\n  top = 0,\r\n  hanging = 1,\r\n  middle = 2,\r\n  alphabetic = 3,\r\n  ideographic = 4,\r\n  bottom = 5,\r\n}\r\n","export enum GlobalCompositeOperationLookup {\r\n  \"source-over\" = 0,\r\n  \"source-in\" = 1,\r\n  \"source-out\" = 2,\r\n  \"source-atop\" = 3,\r\n  \"destination-over\" = 4,\r\n  \"destination-in\" = 5,\r\n  \"destination-out\" = 6,\r\n  \"destination-atop\" = 7,\r\n  \"lighter\" = 8,\r\n  \"copy\" = 9,\r\n  \"xor\" = 10,\r\n  \"multiply\" = 11,\r\n  \"screen\" = 12,\r\n  \"overlay\" = 13,\r\n  \"darken\" = 14,\r\n  \"lighten\" = 15,\r\n  \"color-dodge\" = 16,\r\n  \"color-burn\" = 17,\r\n  \"hard-light\" = 18,\r\n  \"soft-light\" = 19,\r\n  \"difference\" = 20,\r\n  \"exclusion\" = 21,\r\n  \"hue\" = 22,\r\n  \"saturation\" = 23,\r\n  \"color\" = 24,\r\n  \"luminosity\" = 25,\r\n}\r\n","export interface ICanvasPatternIndex {\r\n  [index: number]: CanvasPattern | null;\r\n}\r\n\r\nexport const canvasPatternTypes = {\r\n  \"0\": \"repeat\",\r\n  \"1\": \"repeat-x\",\r\n  \"2\": \"repeat-y\",\r\n  \"3\": \"no-repeat\",\r\n};\r\n","import { ASUtil, instantiateStreaming } from \"assemblyscript/lib/loader\";\r\nimport {\r\n  CanvasPatternType,\r\n  CanvasInstruction,\r\n  Direction,\r\n  FillRule,\r\n  LineCap,\r\n  LineJoin,\r\n  ImageSmoothingQuality,\r\n  TextAlign,\r\n  TextBaseline,\r\n} from \"../shared\";\r\nimport { GlobalCompositeOperationLookup, IStringIndex, IImageBitmapIndex, ICanvasPatternIndex, ICanvasGradientIndex, canvasPatternTypes } from \"../util\";\r\n\r\nexport interface CanvasASInteropAPI {\r\n  init(): void;\r\n  draw(): number;\r\n  update(): void;\r\n}\r\n\r\nexport class CanvasASInterop {\r\n  public ctx: CanvasRenderingContext2D;\r\n  public strings: IStringIndex = {};\r\n  public images: IImageBitmapIndex = {};\r\n  public patterns: ICanvasPatternIndex = {};\r\n  public gradients: ICanvasGradientIndex = {};\r\n  public wasm: (ASUtil & CanvasASInteropAPI) | null = null;\r\n  public loaded: Promise<void>;\r\n\r\n  constructor(ctx: CanvasRenderingContext2D, res: Promise<Response>, imports: any) {\r\n    this.ctx = ctx;\r\n    this.loaded = this.init(res, imports);\r\n  }\r\n\r\n  private async init(res: Promise<Response>, imports: any = {}): Promise<void> {\r\n    imports.__as_interop = {\r\n      add_color_stop: this.add_color_stop.bind(this),\r\n      create_image: this.create_image.bind(this),\r\n      create_linear_gradient: this.create_linear_gradient.bind(this),\r\n      create_pattern: this.create_pattern.bind(this),\r\n      create_radial_gradient: this.create_radial_gradient.bind(this),\r\n      create_string: this.create_string.bind(this),\r\n      remove_image: this.remove_image.bind(this),\r\n      remove_string: this.remove_string.bind(this),\r\n      remove_pattern: this.remove_pattern.bind(this),\r\n    };\r\n    this.wasm = await instantiateStreaming<CanvasASInteropAPI>(res, imports);\r\n    this.wasm.init();\r\n  }\r\n\r\n  public update(): void {\r\n    this.wasm!.update();\r\n  }\r\n\r\n  public draw(): void {\r\n    const data: Float64Array = this.wasm!.getArray(Float64Array as any, this.wasm!.draw());\r\n    this.render(data);\r\n  }\r\n\r\n  private render(data: Float64Array): void {\r\n    var index: number = 0;\r\n    var stride: number = 0;\r\n    while (index < data.length) {\r\n      if (data[index] === CanvasInstruction.Commit) break;\r\n      stride = data[index + 1];\r\n      switch(data[index]) {\r\n        case CanvasInstruction.Arc: {\r\n          this.ctx.arc(\r\n            data[index + 2],\r\n            data[index + 3],\r\n            data[index + 4],\r\n            data[index + 5],\r\n            data[index + 6],\r\n            data[index + 7] === 1,\r\n          );\r\n          break;\r\n        }\r\n        case CanvasInstruction.ArcTo: {\r\n          this.ctx.arcTo(\r\n            data[index + 2],\r\n            data[index + 3],\r\n            data[index + 4],\r\n            data[index + 5],\r\n            data[index + 6],\r\n          );\r\n          break;\r\n        }\r\n        case CanvasInstruction.BeginPath: {\r\n          this.ctx.beginPath();\r\n          break;\r\n        }\r\n        case CanvasInstruction.BezierCurveTo: {\r\n          this.ctx.bezierCurveTo(\r\n            data[index + 2],\r\n            data[index + 3],\r\n            data[index + 4],\r\n            data[index + 5],\r\n            data[index + 6],\r\n            data[index + 7],\r\n          );\r\n          break;\r\n        }\r\n        case CanvasInstruction.ClearRect: {\r\n          this.ctx.clearRect(\r\n            data[index + 2],\r\n            data[index + 3],\r\n            data[index + 4],\r\n            data[index + 5],\r\n          );\r\n          break;\r\n        }\r\n        case CanvasInstruction.Clip: {\r\n          this.ctx.clip();\r\n          break;\r\n        }\r\n        case CanvasInstruction.ClosePath: {\r\n          this.ctx.closePath();\r\n          break;\r\n        }\r\n        case CanvasInstruction.Direction: {\r\n          this.ctx.direction = Direction[data[index + 2]] as CanvasDirection;\r\n          break;\r\n        }\r\n        case CanvasInstruction.DrawImage: {\r\n          if (!this.images[data[index + 2]]) break;\r\n          this.ctx.drawImage(\r\n            this.images[data[index + 2]]!,\r\n            data[index + 3],\r\n            data[index + 4],\r\n            data[index + 5],\r\n            data[index + 6],\r\n            data[index + 7],\r\n            data[index + 8],\r\n            data[index + 9],\r\n            data[index + 10],\r\n          );\r\n          break;\r\n        }\r\n        case CanvasInstruction.Ellipse: {\r\n          this.ctx.ellipse(\r\n            data[index + 2],\r\n            data[index + 3],\r\n            data[index + 4],\r\n            data[index + 5],\r\n            data[index + 6],\r\n            data[index + 7],\r\n            data[index + 8],\r\n            data[index + 9] === 1.0,\r\n          );\r\n          break;\r\n        }\r\n        case CanvasInstruction.Fill: {\r\n          this.ctx.fill(FillRule[data[index + 2]] as CanvasFillRule);\r\n          break;\r\n        }\r\n        case CanvasInstruction.FillGradient: {\r\n          this.ctx.fillStyle = this.gradients[data[index + 2]]!;\r\n          break;\r\n        }\r\n        case CanvasInstruction.FillPattern: {\r\n          this.ctx.fillStyle = this.patterns[data[index + 2]]!;\r\n          break;\r\n        }\r\n        case CanvasInstruction.FillRect: {\r\n          this.ctx.fillRect(\r\n            data[index + 2],\r\n            data[index + 3],\r\n            data[index + 4],\r\n            data[index + 5],\r\n          );\r\n        }\r\n        case CanvasInstruction.FillStyle: {\r\n          this.ctx.fillStyle = this.strings[data[index + 2]]!;\r\n          break;\r\n        }\r\n        case CanvasInstruction.FillText: {\r\n          this.ctx.fillText(\r\n            this.strings[data[index + 2]]!,\r\n            data[index + 3],\r\n            data[index + 4],\r\n            data[index + 5] === -1 ? void 0 : data[index + 5],\r\n          );\r\n          break;\r\n        }\r\n        case CanvasInstruction.Filter: {\r\n          this.ctx.filter = this.strings[data[index + 2]]!;\r\n          break;\r\n        }\r\n        case CanvasInstruction.Font: {\r\n          this.ctx.font = this.strings[data[index + 2]]!;\r\n          break;\r\n        }\r\n        case CanvasInstruction.GlobalAlpha: {\r\n          this.ctx.globalAlpha = data[index + 2];\r\n          break;\r\n        }\r\n        case CanvasInstruction.GlobalCompositeOperation: {\r\n          this.ctx.globalCompositeOperation = GlobalCompositeOperationLookup[data[index + 2]];\r\n          break;\r\n        }\r\n        case CanvasInstruction.ImageSmoothingEnabled: {\r\n          this.ctx.imageSmoothingEnabled = data[index + 2] === 1.0;\r\n          break;\r\n        }\r\n        case CanvasInstruction.ImageSmoothingQuality: {\r\n          this.ctx.imageSmoothingQuality = ImageSmoothingQuality[data[index + 2]] as \"high\" | \"low\" | \"medium\";\r\n          break;\r\n        }\r\n        case CanvasInstruction.LineCap: {\r\n          this.ctx.lineCap = LineCap[data[index + 2]] as CanvasLineCap;\r\n          break;\r\n        }\r\n        case CanvasInstruction.LineDash: {\r\n          // setLineDash accepts a typed array instead of just a number[]\r\n          this.ctx.setLineDash(this.wasm!.getArray(Float64Array as any, data[index + 2]) as any);\r\n          break;\r\n        }\r\n        case CanvasInstruction.LineDashOffset: {\r\n          this.ctx.lineDashOffset = data[index + 2];\r\n          break;\r\n        }\r\n        case CanvasInstruction.LineJoin: {\r\n          this.ctx.lineJoin = LineJoin[data[index + 2]] as CanvasLineJoin;\r\n          break;\r\n        }\r\n        case CanvasInstruction.LineTo: {\r\n          this.ctx.lineTo(data[index + 2], data[index + 3]);\r\n          break;\r\n        }\r\n        case CanvasInstruction.LineWidth: {\r\n          this.ctx.lineWidth = data[index + 2];\r\n          break;\r\n        }\r\n        case CanvasInstruction.MiterLimit: {\r\n          this.ctx.miterLimit = data[index + 2];\r\n          break;\r\n        }\r\n        case CanvasInstruction.MoveTo: {\r\n          this.ctx.moveTo(data[index + 2], data[index + 3]);\r\n          break;\r\n        }\r\n        case CanvasInstruction.QuadraticCurveTo: {\r\n          this.ctx.quadraticCurveTo(\r\n            data[index + 2],\r\n            data[index + 3],\r\n            data[index + 4],\r\n            data[index + 5],\r\n          );\r\n          break;\r\n        }\r\n        case CanvasInstruction.Rect: {\r\n          this.ctx.rect(\r\n            data[index + 2],\r\n            data[index + 3],\r\n            data[index + 4],\r\n            data[index + 5],\r\n          );\r\n          break;\r\n        }\r\n        case CanvasInstruction.Restore: {\r\n          this.ctx.restore();\r\n          break;\r\n        }\r\n        case CanvasInstruction.Rotate: {\r\n          this.ctx.rotate(data[index + 2]);\r\n          break;\r\n        }\r\n        case CanvasInstruction.Save: {\r\n          this.ctx.save();\r\n          break;\r\n        }\r\n        case CanvasInstruction.Scale: {\r\n          this.ctx.scale(data[index + 2], data[index + 3]);\r\n          break;\r\n        }\r\n        case CanvasInstruction.SetTransform: {\r\n          this.ctx.setTransform(\r\n            data[index + 2],\r\n            data[index + 3],\r\n            data[index + 4],\r\n            data[index + 5],\r\n            data[index + 6],\r\n            data[index + 7],\r\n          );\r\n          break;\r\n        }\r\n        case CanvasInstruction.ShadowBlur: {\r\n          this.ctx.shadowBlur = data[index + 2];\r\n          break;\r\n        }\r\n        case CanvasInstruction.ShadowColor: {\r\n          this.ctx.shadowColor = this.strings[data[index + 2]]!;\r\n          break;\r\n        }\r\n        case CanvasInstruction.ShadowOffsetX: {\r\n          this.ctx.shadowOffsetX = data[index + 2];\r\n          break;\r\n        }\r\n        case CanvasInstruction.ShadowOffsetY: {\r\n          this.ctx.shadowOffsetY = data[index + 2];\r\n          break;\r\n        }\r\n        case CanvasInstruction.StrokeStyle: {\r\n          this.ctx.fillStyle = this.strings[data[index + 2]]!;\r\n          break;\r\n        }\r\n        case CanvasInstruction.StrokeGradient: {\r\n          this.ctx.strokeStyle = this.gradients[data[index + 2]]!;\r\n          break;\r\n        }\r\n        case CanvasInstruction.StrokePattern: {\r\n          this.ctx.strokeStyle = this.patterns[data[index + 2]]!;\r\n          break;\r\n        }\r\n        case CanvasInstruction.TextAlign: {\r\n          this.ctx.textAlign = TextAlign[data[index + 2]] as CanvasTextAlign;\r\n          break;\r\n        }\r\n        case CanvasInstruction.TextBaseline: {\r\n          this.ctx.textBaseline = TextBaseline[data[index + 2]] as CanvasTextBaseline;\r\n          break;\r\n        }\r\n        case CanvasInstruction.Transform: {\r\n          this.ctx.transform(\r\n            data[index + 2],\r\n            data[index + 3],\r\n            data[index + 4],\r\n            data[index + 5],\r\n            data[index + 6],\r\n            data[index + 7],\r\n          );\r\n          break;\r\n        }\r\n        case CanvasInstruction.Translate: {\r\n          this.ctx.translate(data[index + 2], data[index + 3]);\r\n          break;\r\n        }\r\n        default:\r\n          throw new Error(\"Invalid canvas instruction type: \" + data[index]);\r\n      }\r\n      index += stride;\r\n    }\r\n  }\r\n\r\n  private add_color_stop(index: number, point: number, color: number): void {\r\n    this.gradients[index]!.addColorStop(point, this.wasm!.getString(color));\r\n  }\r\n\r\n  private create_image(imagePointer: number, sourcePointer: number): void {\r\n    this.load_image(imagePointer, sourcePointer);\r\n  }\r\n\r\n  private create_linear_gradient(index: number, x0: number, y0: number, x1: number, y1: number): void {\r\n    this.gradients[index] = this.ctx.createLinearGradient(x0, y0, x1, y1);\r\n  }\r\n\r\n  private create_pattern(index: number, imageIndex: number, patternType: CanvasPatternType): void {\r\n    this.patterns[index] = this.ctx.createPattern(this.images[imageIndex]!, canvasPatternTypes[patternType]);\r\n  }\r\n\r\n  private create_radial_gradient(index: number, x0: number, y0: number, r0: number, x1: number, y1: number, r1: number): void {\r\n    this.gradients[index] = this.ctx.createRadialGradient(x0, y0, r0, x1, y1, r1);\r\n  }\r\n\r\n  private create_string(index: number, stringPointer: number): void {\r\n    this.strings[index] = this.wasm!.getString(stringPointer);\r\n  }\r\n\r\n  private remove_image(index: number): void {\r\n    this.images[index] = null;\r\n  }\r\n\r\n  private remove_string(index: number): void {\r\n    this.strings[index] = null;\r\n  }\r\n\r\n  private remove_pattern(index: number): void {\r\n    this.patterns[index] = null;\r\n  }\r\n\r\n  private async load_image(imagePointer: number, sourcePointer: number): Promise<void> {\r\n    const source: string = this.wasm!.getString(sourcePointer);\r\n    const res: Response = await fetch(source);\r\n    const blob: Blob = await res.blob();\r\n    const img: ImageBitmap = await createImageBitmap(blob);\r\n    const imageIndex: number = imagePointer / Int32Array.BYTES_PER_ELEMENT;\r\n\r\n    this.images[this.wasm!.I32[imageIndex]] = img;\r\n    this.wasm!.I32[imageIndex + 1] = 1;\r\n    this.wasm!.I32[imageIndex + 2] = img.width;\r\n    this.wasm!.I32[imageIndex + 3] = img.height;\r\n  }\r\n}"],"names":["Direction","FillRule","GlobalCompositeOperation","ImageSmoothingQuality","LineCap","LineJoin","TextAlign","TextBaseline","GlobalCompositeOperationLookup","canvasPatternTypes","CanvasASInterop","constructor","ctx","res","imports","loaded","this","init","__as_interop","_this","add_color_stop","bind","create_image","create_linear_gradient","create_pattern","create_radial_gradient","create_string","remove_image","remove_string","remove_pattern","instantiateStreaming","wasm","update","draw","data","getArray","Float64Array","render","index","stride","length","arc","arcTo","beginPath","bezierCurveTo","clearRect","clip","closePath","direction","images","drawImage","ellipse","fill","fillStyle","gradients","patterns","fillRect","strings","fillText","filter","font","globalAlpha","globalCompositeOperation","imageSmoothingEnabled","imageSmoothingQuality","lineCap","setLineDash","lineDashOffset","lineJoin","lineTo","lineWidth","miterLimit","moveTo","quadraticCurveTo","rect","restore","rotate","save","scale","setTransform","shadowBlur","shadowColor","shadowOffsetX","shadowOffsetY","strokeStyle","textAlign","textBaseline","transform","translate","Error","point","color","addColorStop","getString","imagePointer","sourcePointer","load_image","x0","y0","x1","y1","createLinearGradient","imageIndex","patternType","createPattern","r0","r1","createRadialGradient","stringPointer","source","_this2","fetch","blob","createImageBitmap","img","Int32Array","BYTES_PER_ELEMENT","I32","width","height"],"mappings":"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"}